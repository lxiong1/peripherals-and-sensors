
/home/luexiong/projects/peripherals-and-sensors/target/1.4.4/argon/peripherals-and-sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003240  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d7260  000d7260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000000  2003f400  2003f400  00017304  2**0
                  CONTENTS
  5 .data         00000070  2003e350  000d7268  0000e350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000430  2003e3c0  2003e3c0  0001e3c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d72d8  000d72d8  000172d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d7300  000d7300  00017300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000ecac0  00000000  00000000  00017304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001274c  00000000  00000000  00103dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002730  00000000  00000000  00116510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000354f5  00000000  00000000  00118c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002b096  00000000  00000000  0014e135  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0010ba45  00000000  00000000  001791cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002137b  00000000  00000000  00284c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004b58  00000000  00000000  002a5f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d5c0  00000000  00000000  002aaae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fedb 	bl	d6dec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fee0 	bl	d6e02 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e350 	.word	0x2003e350
   d404c:	000d7268 	.word	0x000d7268
   d4050:	2003e3c0 	.word	0x2003e3c0
   d4054:	2003e3c0 	.word	0x2003e3c0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 f965 	bl	d532c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7254 	.word	0x000d7254
   d4084:	000d7218 	.word	0x000d7218

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b815 	b.w	d40b6 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f833 	bl	d40f8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 b917 	b.w	d52c8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bafd 	b.w	d4698 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb03 	b.w	d46a8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bb01 	b.w	d46a8 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <setup>:
#include <math.h>

int temperaturePin = A4;

void setup() {
   d40b6:	b508      	push	{r3, lr}
  Serial.begin(115200);
   d40b8:	f000 fd7c 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d40bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
}
   d40c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include <math.h>

int temperaturePin = A4;

void setup() {
  Serial.begin(115200);
   d40c4:	f000 bd6a 	b.w	d4b9c <_ZN9USBSerial5beginEl>

000d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40c8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40ca:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40cc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40ce:	b17c      	cbz	r4, d40f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d0:	6863      	ldr	r3, [r4, #4]
   d40d2:	3b01      	subs	r3, #1
   d40d4:	6063      	str	r3, [r4, #4]
   d40d6:	b95b      	cbnz	r3, d40f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40d8:	6823      	ldr	r3, [r4, #0]
   d40da:	4620      	mov	r0, r4
   d40dc:	689b      	ldr	r3, [r3, #8]
   d40de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e0:	68a3      	ldr	r3, [r4, #8]
   d40e2:	3b01      	subs	r3, #1
   d40e4:	60a3      	str	r3, [r4, #8]
   d40e6:	b91b      	cbnz	r3, d40f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	4620      	mov	r0, r4
   d40ec:	68db      	ldr	r3, [r3, #12]
   d40ee:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d40f0:	4628      	mov	r0, r5
   d40f2:	bd38      	pop	{r3, r4, r5, pc}
   d40f4:	0000      	movs	r0, r0
	...

000d40f8 <loop>:
}

void loop() {
   d40f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d40fa:	ed2d 8b04 	vpush	{d8-d9}
  int adcValue = analogRead(temperaturePin);
   d40fe:	4b74      	ldr	r3, [pc, #464]	; (d42d0 <loop+0x1d8>)

void setup() {
  Serial.begin(115200);
}

void loop() {
   d4100:	b089      	sub	sp, #36	; 0x24
  int adcValue = analogRead(temperaturePin);
   d4102:	8818      	ldrh	r0, [r3, #0]
   d4104:	f001 fc28 	bl	d5958 <analogRead>
  double output_voltage = ( (adcValue * 3.3) / 4095.0 );
  double thermistor_resistance_kilo_ohms = ( ( 3.3 * ( 10.0 / output_voltage ) ) - 10 );
  double thermistor_resistance_ohms = thermistor_resistance_kilo_ohms * 1000 ;
  double thermistor_resistance_log = log(thermistor_resistance_ohms);
   d4108:	f002 f97c 	bl	d6404 <__aeabi_i2d>
   d410c:	a364      	add	r3, pc, #400	; (adr r3, d42a0 <loop+0x1a8>)
   d410e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4112:	f002 f9dd 	bl	d64d0 <__aeabi_dmul>
   d4116:	a364      	add	r3, pc, #400	; (adr r3, d42a8 <loop+0x1b0>)
   d4118:	e9d3 2300 	ldrd	r2, r3, [r3]
   d411c:	f002 fb02 	bl	d6724 <__aeabi_ddiv>
   d4120:	4602      	mov	r2, r0
   d4122:	460b      	mov	r3, r1
   d4124:	2000      	movs	r0, #0
   d4126:	496b      	ldr	r1, [pc, #428]	; (d42d4 <loop+0x1dc>)
   d4128:	f002 fafc 	bl	d6724 <__aeabi_ddiv>
   d412c:	a35c      	add	r3, pc, #368	; (adr r3, d42a0 <loop+0x1a8>)
   d412e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4132:	f002 f9cd 	bl	d64d0 <__aeabi_dmul>
   d4136:	2200      	movs	r2, #0
   d4138:	4b66      	ldr	r3, [pc, #408]	; (d42d4 <loop+0x1dc>)
   d413a:	f002 f815 	bl	d6168 <__aeabi_dsub>
   d413e:	2200      	movs	r2, #0
   d4140:	4b65      	ldr	r3, [pc, #404]	; (d42d8 <loop+0x1e0>)
   d4142:	f002 f9c5 	bl	d64d0 <__aeabi_dmul>
   d4146:	ec41 0b10 	vmov	d0, r0, r1
   d414a:	f001 fd6f 	bl	d5c2c <log>
   d414e:	ec55 4b10 	vmov	r4, r5, d0
  double kelvin = ( 1 / ( 0.001129148 + ( 0.000234125 * thermistor_resistance_log ) + 
                  ( 0.0000000876741 * thermistor_resistance_log * thermistor_resistance_log * thermistor_resistance_log ) ) );
  double celsius = kelvin - 273.15;
   d4152:	ee10 0a10 	vmov	r0, s0
   d4156:	a356      	add	r3, pc, #344	; (adr r3, d42b0 <loop+0x1b8>)
   d4158:	e9d3 2300 	ldrd	r2, r3, [r3]
   d415c:	4629      	mov	r1, r5
   d415e:	f002 f9b7 	bl	d64d0 <__aeabi_dmul>
   d4162:	4622      	mov	r2, r4
   d4164:	462b      	mov	r3, r5
   d4166:	f002 f9b3 	bl	d64d0 <__aeabi_dmul>
   d416a:	4622      	mov	r2, r4
   d416c:	462b      	mov	r3, r5
   d416e:	f002 f9af 	bl	d64d0 <__aeabi_dmul>
   d4172:	a351      	add	r3, pc, #324	; (adr r3, d42b8 <loop+0x1c0>)
   d4174:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4178:	4606      	mov	r6, r0
   d417a:	460f      	mov	r7, r1
   d417c:	4620      	mov	r0, r4
   d417e:	4629      	mov	r1, r5
   d4180:	f002 f9a6 	bl	d64d0 <__aeabi_dmul>
   d4184:	a34e      	add	r3, pc, #312	; (adr r3, d42c0 <loop+0x1c8>)
   d4186:	e9d3 2300 	ldrd	r2, r3, [r3]
   d418a:	f001 ffef 	bl	d616c <__adddf3>
   d418e:	4602      	mov	r2, r0
   d4190:	460b      	mov	r3, r1
   d4192:	4630      	mov	r0, r6
   d4194:	4639      	mov	r1, r7
   d4196:	f001 ffe9 	bl	d616c <__adddf3>
   d419a:	4602      	mov	r2, r0
   d419c:	460b      	mov	r3, r1
   d419e:	2000      	movs	r0, #0
   d41a0:	494e      	ldr	r1, [pc, #312]	; (d42dc <loop+0x1e4>)
   d41a2:	f002 fabf 	bl	d6724 <__aeabi_ddiv>
   d41a6:	a348      	add	r3, pc, #288	; (adr r3, d42c8 <loop+0x1d0>)
   d41a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41ac:	f001 ffdc 	bl	d6168 <__aeabi_dsub>
  double fahrenheit = ( celsius * 9 / 5 ) + 32;
   d41b0:	2200      	movs	r2, #0
   d41b2:	4b4b      	ldr	r3, [pc, #300]	; (d42e0 <loop+0x1e8>)
  double thermistor_resistance_kilo_ohms = ( ( 3.3 * ( 10.0 / output_voltage ) ) - 10 );
  double thermistor_resistance_ohms = thermistor_resistance_kilo_ohms * 1000 ;
  double thermistor_resistance_log = log(thermistor_resistance_ohms);
  double kelvin = ( 1 / ( 0.001129148 + ( 0.000234125 * thermistor_resistance_log ) + 
                  ( 0.0000000876741 * thermistor_resistance_log * thermistor_resistance_log * thermistor_resistance_log ) ) );
  double celsius = kelvin - 273.15;
   d41b4:	ec41 0b19 	vmov	d9, r0, r1
  double fahrenheit = ( celsius * 9 / 5 ) + 32;
   d41b8:	f002 f98a 	bl	d64d0 <__aeabi_dmul>
   d41bc:	2200      	movs	r2, #0
   d41be:	4b49      	ldr	r3, [pc, #292]	; (d42e4 <loop+0x1ec>)
   d41c0:	f002 fab0 	bl	d6724 <__aeabi_ddiv>
   d41c4:	2200      	movs	r2, #0
   d41c6:	4b48      	ldr	r3, [pc, #288]	; (d42e8 <loop+0x1f0>)
   d41c8:	f001 ffd0 	bl	d616c <__adddf3>
   d41cc:	ec41 0b18 	vmov	d8, r0, r1

  Serial.println("Temperature in Celsius: ");
   d41d0:	f000 fcf0 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d41d4:	4945      	ldr	r1, [pc, #276]	; (d42ec <loop+0x1f4>)
   d41d6:	f001 f922 	bl	d541e <_ZN5Print7printlnEPKc>
  Serial.println(String(celsius));
   d41da:	f000 fceb 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d41de:	eeb0 0a49 	vmov.f32	s0, s18
   d41e2:	eef0 0a69 	vmov.f32	s1, s19
   d41e6:	4604      	mov	r4, r0
   d41e8:	2106      	movs	r1, #6
   d41ea:	a804      	add	r0, sp, #16
   d41ec:	f001 fb3a 	bl	d5864 <_ZN6StringC1Edi>
   d41f0:	9904      	ldr	r1, [sp, #16]
   d41f2:	4620      	mov	r0, r4
   d41f4:	f001 f913 	bl	d541e <_ZN5Print7printlnEPKc>
   d41f8:	a804      	add	r0, sp, #16
   d41fa:	f001 fadb 	bl	d57b4 <_ZN6StringD1Ev>

  Serial.println("Temperature in Fahrenheit: ");
   d41fe:	f000 fcd9 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d4202:	493b      	ldr	r1, [pc, #236]	; (d42f0 <loop+0x1f8>)
   d4204:	f001 f90b 	bl	d541e <_ZN5Print7printlnEPKc>
  Serial.println(String(fahrenheit));
   d4208:	f000 fcd4 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d420c:	eeb0 0a48 	vmov.f32	s0, s16
   d4210:	eef0 0a68 	vmov.f32	s1, s17
   d4214:	4604      	mov	r4, r0
   d4216:	2106      	movs	r1, #6
   d4218:	a804      	add	r0, sp, #16
   d421a:	f001 fb23 	bl	d5864 <_ZN6StringC1Edi>
   d421e:	9904      	ldr	r1, [sp, #16]
   d4220:	4620      	mov	r0, r4
   d4222:	f001 f8fc 	bl	d541e <_ZN5Print7printlnEPKc>
   d4226:	4c33      	ldr	r4, [pc, #204]	; (d42f4 <loop+0x1fc>)
   d4228:	a804      	add	r0, sp, #16
   d422a:	f001 fac3 	bl	d57b4 <_ZN6StringD1Ev>

  Particle.publish("celsius", String(celsius));
   d422e:	eeb0 0a49 	vmov.f32	s0, s18
   d4232:	eef0 0a69 	vmov.f32	s1, s19
   d4236:	2106      	movs	r1, #6
   d4238:	a804      	add	r0, sp, #16
   d423a:	f001 fb13 	bl	d5864 <_ZN6StringC1Edi>
   d423e:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4240:	9a04      	ldr	r2, [sp, #16]
   d4242:	492d      	ldr	r1, [pc, #180]	; (d42f8 <loop+0x200>)
   d4244:	f88d 3000 	strb.w	r3, [sp]
   d4248:	a802      	add	r0, sp, #8
   d424a:	233c      	movs	r3, #60	; 0x3c
   d424c:	f000 fe9c 	bl	d4f88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4250:	a803      	add	r0, sp, #12
   d4252:	f7ff ff39 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4256:	a804      	add	r0, sp, #16
   d4258:	f001 faac 	bl	d57b4 <_ZN6StringD1Ev>
  Particle.publish("fahrenheit", String(fahrenheit));
   d425c:	eeb0 0a48 	vmov.f32	s0, s16
   d4260:	eef0 0a68 	vmov.f32	s1, s17
   d4264:	2106      	movs	r1, #6
   d4266:	a804      	add	r0, sp, #16
   d4268:	f001 fafc 	bl	d5864 <_ZN6StringC1Edi>
   d426c:	7823      	ldrb	r3, [r4, #0]
   d426e:	9a04      	ldr	r2, [sp, #16]
   d4270:	4922      	ldr	r1, [pc, #136]	; (d42fc <loop+0x204>)
   d4272:	f88d 3000 	strb.w	r3, [sp]
   d4276:	a802      	add	r0, sp, #8
   d4278:	233c      	movs	r3, #60	; 0x3c
   d427a:	f000 fe85 	bl	d4f88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d427e:	a803      	add	r0, sp, #12
   d4280:	f7ff ff22 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4284:	a804      	add	r0, sp, #16
   d4286:	f001 fa95 	bl	d57b4 <_ZN6StringD1Ev>

  delay(1000);
   d428a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d428e:	f001 f87b 	bl	d5388 <delay>
}
   d4292:	b009      	add	sp, #36	; 0x24
   d4294:	ecbd 8b04 	vpop	{d8-d9}
   d4298:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d429a:	bf00      	nop
   d429c:	f3af 8000 	nop.w
   d42a0:	66666666 	.word	0x66666666
   d42a4:	400a6666 	.word	0x400a6666
   d42a8:	00000000 	.word	0x00000000
   d42ac:	40affe00 	.word	0x40affe00
   d42b0:	14170d19 	.word	0x14170d19
   d42b4:	3e7788eb 	.word	0x3e7788eb
   d42b8:	6fb4c3c2 	.word	0x6fb4c3c2
   d42bc:	3f2eafee 	.word	0x3f2eafee
   d42c0:	6edeb890 	.word	0x6edeb890
   d42c4:	3f527ffd 	.word	0x3f527ffd
   d42c8:	66666666 	.word	0x66666666
   d42cc:	40711266 	.word	0x40711266
   d42d0:	2003e350 	.word	0x2003e350
   d42d4:	40240000 	.word	0x40240000
   d42d8:	408f4000 	.word	0x408f4000
   d42dc:	3ff00000 	.word	0x3ff00000
   d42e0:	40220000 	.word	0x40220000
   d42e4:	40140000 	.word	0x40140000
   d42e8:	40400000 	.word	0x40400000
   d42ec:	000d6ec0 	.word	0x000d6ec0
   d42f0:	000d6ed9 	.word	0x000d6ed9
   d42f4:	2003e3c4 	.word	0x2003e3c4
   d42f8:	000d6ef5 	.word	0x000d6ef5
   d42fc:	000d6efd 	.word	0x000d6efd

000d4300 <_GLOBAL__sub_I_temperaturePin>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4300:	4b02      	ldr	r3, [pc, #8]	; (d430c <_GLOBAL__sub_I_temperaturePin+0xc>)
   d4302:	2200      	movs	r2, #0
   d4304:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4306:	f000 b903 	b.w	d4510 <HAL_Pin_Map>
   d430a:	bf00      	nop
   d430c:	2003e3c4 	.word	0x2003e3c4

000d4310 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_USB_USART_Init+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	681b      	ldr	r3, [r3, #0]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	0003024c 	.word	0x0003024c

000d4320 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_USB_USART_Begin+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	685b      	ldr	r3, [r3, #4]
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	0003024c 	.word	0x0003024c

000d4330 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_USB_USART_Available_Data+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	691b      	ldr	r3, [r3, #16]
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	0003024c 	.word	0x0003024c

000d4340 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	695b      	ldr	r3, [r3, #20]
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	0003024c 	.word	0x0003024c

000d4350 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_USB_USART_Receive_Data+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	699b      	ldr	r3, [r3, #24]
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	0003024c 	.word	0x0003024c

000d4360 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_USB_USART_Send_Data+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	69db      	ldr	r3, [r3, #28]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	0003024c 	.word	0x0003024c

000d4370 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Flush_Data+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6a1b      	ldr	r3, [r3, #32]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_I2C_Write_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	6a1b      	ldr	r3, [r3, #32]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	00030228 	.word	0x00030228

000d4390 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_I2C_Available_Data+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	00030228 	.word	0x00030228

000d43a0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_I2C_Read_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	00030228 	.word	0x00030228

000d43b0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_I2C_Peek_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	00030228 	.word	0x00030228

000d43c0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_I2C_Flush_Data+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	00030228 	.word	0x00030228

000d43d0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_I2C_Is_Enabled+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030228 	.word	0x00030228

000d43e0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_I2C_Init+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030228 	.word	0x00030228

000d43f0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_USART_Init+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	681b      	ldr	r3, [r3, #0]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003023c 	.word	0x0003023c

000d4400 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_USART_Write_Data+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	68db      	ldr	r3, [r3, #12]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	0003023c 	.word	0x0003023c

000d4410 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_USART_Available_Data+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	691b      	ldr	r3, [r3, #16]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	0003023c 	.word	0x0003023c

000d4420 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_USART_Read_Data+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	695b      	ldr	r3, [r3, #20]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003023c 	.word	0x0003023c

000d4430 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USART_Peek_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	699b      	ldr	r3, [r3, #24]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003023c 	.word	0x0003023c

000d4440 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USART_Flush_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	69db      	ldr	r3, [r3, #28]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003023c 	.word	0x0003023c

000d4450 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_USART_Is_Enabled+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6a1b      	ldr	r3, [r3, #32]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003023c 	.word	0x0003023c

000d4460 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_USART_Available_Data_For_Write+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	0003023c 	.word	0x0003023c

000d4470 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <inet_inet_ntop+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	695b      	ldr	r3, [r3, #20]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030264 	.word	0x00030264

000d4480 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <os_thread_is_current+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	689b      	ldr	r3, [r3, #8]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030248 	.word	0x00030248

000d4490 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <os_thread_join+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	691b      	ldr	r3, [r3, #16]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030248 	.word	0x00030248

000d44a0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <os_thread_cleanup+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	695b      	ldr	r3, [r3, #20]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030248 	.word	0x00030248

000d44b0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <os_mutex_create+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030248 	.word	0x00030248

000d44c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <os_mutex_recursive_create+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030248 	.word	0x00030248

000d44d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_RNG_GetRandomNumber+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	685b      	ldr	r3, [r3, #4]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030218 	.word	0x00030218

000d44e0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	695b      	ldr	r3, [r3, #20]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030218 	.word	0x00030218

000d44f0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_SPI_Init+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	69db      	ldr	r3, [r3, #28]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030230 	.word	0x00030230

000d4500 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_SPI_Is_Enabled+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6a1b      	ldr	r3, [r3, #32]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030230 	.word	0x00030230

000d4510 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_Pin_Map+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	681b      	ldr	r3, [r3, #0]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	0003022c 	.word	0x0003022c

000d4520 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_Validate_Pin_Function+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	685b      	ldr	r3, [r3, #4]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	0003022c 	.word	0x0003022c

000d4530 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_ADC_Read+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	0003022c 	.word	0x0003022c

000d4540 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <netdb_freeaddrinfo+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	689b      	ldr	r3, [r3, #8]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030268 	.word	0x00030268

000d4550 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <netdb_getaddrinfo+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	68db      	ldr	r3, [r3, #12]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030268 	.word	0x00030268

000d4560 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <spark_cloud_flag_connected+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	695b      	ldr	r3, [r3, #20]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030244 	.word	0x00030244

000d4570 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <spark_send_event+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6a1b      	ldr	r3, [r3, #32]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030244 	.word	0x00030244

000d4580 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030244 	.word	0x00030244

000d4590 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_connect+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	685b      	ldr	r3, [r3, #4]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_connecting+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	689b      	ldr	r3, [r3, #8]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <network_disconnect+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	68db      	ldr	r3, [r3, #12]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030240 	.word	0x00030240

000d45c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <network_ready+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	691b      	ldr	r3, [r3, #16]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030240 	.word	0x00030240

000d45d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <network_on+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	695b      	ldr	r3, [r3, #20]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030240 	.word	0x00030240

000d45e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <network_off+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	699b      	ldr	r3, [r3, #24]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030240 	.word	0x00030240

000d45f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <network_listen+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	69db      	ldr	r3, [r3, #28]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030240 	.word	0x00030240

000d4600 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <network_listening+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	6a1b      	ldr	r3, [r3, #32]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030240 	.word	0x00030240

000d4610 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <network_set_listen_timeout+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030240 	.word	0x00030240

000d4620 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <network_get_listen_timeout+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030240 	.word	0x00030240

000d4630 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <set_system_mode+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	685b      	ldr	r3, [r3, #4]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030220 	.word	0x00030220

000d4640 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <system_delay_ms+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	695b      	ldr	r3, [r3, #20]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030220 	.word	0x00030220

000d4650 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <application_thread_current+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030220 	.word	0x00030220

000d4660 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <application_thread_invoke+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030220 	.word	0x00030220

000d4670 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b03      	ldr	r3, [pc, #12]	; (d4680 <system_ctrl_set_app_request_handler+0x10>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d467a:	9301      	str	r3, [sp, #4]
   d467c:	bd08      	pop	{r3, pc}
   d467e:	0000      	.short	0x0000
   d4680:	00030220 	.word	0x00030220

000d4684 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b03      	ldr	r3, [pc, #12]	; (d4694 <system_ctrl_set_result+0x10>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d468e:	9301      	str	r3, [sp, #4]
   d4690:	bd08      	pop	{r3, pc}
   d4692:	0000      	.short	0x0000
   d4694:	00030220 	.word	0x00030220

000d4698 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <malloc+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	681b      	ldr	r3, [r3, #0]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003021c 	.word	0x0003021c

000d46a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <free+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	685b      	ldr	r3, [r3, #4]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003021c 	.word	0x0003021c

000d46b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <realloc+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	689b      	ldr	r3, [r3, #8]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003021c 	.word	0x0003021c

000d46c8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <abort+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003021c 	.word	0x0003021c

000d46d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <_malloc_r+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	0003021c 	.word	0x0003021c

000d46e8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <__errno+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003021c 	.word	0x0003021c

000d46f8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d46f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d46fa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d46fc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d46fe:	b113      	cbz	r3, d4706 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4700:	2203      	movs	r2, #3
   d4702:	4601      	mov	r1, r0
   d4704:	4798      	blx	r3
    }
   d4706:	4620      	mov	r0, r4
   d4708:	bd10      	pop	{r4, pc}

000d470a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d470a:	2300      	movs	r3, #0
   d470c:	461a      	mov	r2, r3
   d470e:	6840      	ldr	r0, [r0, #4]
   d4710:	f7ff bf3e 	b.w	d4590 <network_connect>

000d4714 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4714:	2200      	movs	r2, #0
   d4716:	2102      	movs	r1, #2
   d4718:	6840      	ldr	r0, [r0, #4]
   d471a:	f7ff bf49 	b.w	d45b0 <network_disconnect>

000d471e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d471e:	2200      	movs	r2, #0
   d4720:	4611      	mov	r1, r2
   d4722:	6840      	ldr	r0, [r0, #4]
   d4724:	f7ff bf3c 	b.w	d45a0 <network_connecting>

000d4728 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4728:	2200      	movs	r2, #0
   d472a:	4611      	mov	r1, r2
   d472c:	6840      	ldr	r0, [r0, #4]
   d472e:	f7ff bf47 	b.w	d45c0 <network_ready>

000d4732 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4732:	2300      	movs	r3, #0
   d4734:	461a      	mov	r2, r3
   d4736:	4619      	mov	r1, r3
   d4738:	6840      	ldr	r0, [r0, #4]
   d473a:	f7ff bf49 	b.w	d45d0 <network_on>

000d473e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d473e:	2300      	movs	r3, #0
   d4740:	461a      	mov	r2, r3
   d4742:	4619      	mov	r1, r3
   d4744:	6840      	ldr	r0, [r0, #4]
   d4746:	f7ff bf4b 	b.w	d45e0 <network_off>

000d474a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d474a:	2200      	movs	r2, #0
   d474c:	f081 0101 	eor.w	r1, r1, #1
   d4750:	6840      	ldr	r0, [r0, #4]
   d4752:	f7ff bf4d 	b.w	d45f0 <network_listen>

000d4756 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4756:	2200      	movs	r2, #0
   d4758:	6840      	ldr	r0, [r0, #4]
   d475a:	f7ff bf59 	b.w	d4610 <network_set_listen_timeout>

000d475e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d475e:	2200      	movs	r2, #0
   d4760:	4611      	mov	r1, r2
   d4762:	6840      	ldr	r0, [r0, #4]
   d4764:	f7ff bf5c 	b.w	d4620 <network_get_listen_timeout>

000d4768 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4768:	2200      	movs	r2, #0
   d476a:	4611      	mov	r1, r2
   d476c:	6840      	ldr	r0, [r0, #4]
   d476e:	f7ff bf47 	b.w	d4600 <network_listening>

000d4772 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4776:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4778:	b095      	sub	sp, #84	; 0x54
   d477a:	4616      	mov	r6, r2
   d477c:	460d      	mov	r5, r1
   d477e:	4607      	mov	r7, r0
    IPAddress addr;
   d4780:	f000 fa78 	bl	d4c74 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4784:	4621      	mov	r1, r4
   d4786:	2220      	movs	r2, #32
   d4788:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d478a:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d478c:	f002 fb39 	bl	d6e02 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4790:	2340      	movs	r3, #64	; 0x40
   d4792:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4794:	4621      	mov	r1, r4
   d4796:	466b      	mov	r3, sp
   d4798:	aa0c      	add	r2, sp, #48	; 0x30
   d479a:	4630      	mov	r0, r6
   d479c:	f7ff fed8 	bl	d4550 <netdb_getaddrinfo>
    if (!r) {
   d47a0:	4604      	mov	r4, r0
   d47a2:	2800      	cmp	r0, #0
   d47a4:	d144      	bne.n	d4830 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d47a6:	4602      	mov	r2, r0
   d47a8:	2101      	movs	r1, #1
   d47aa:	6868      	ldr	r0, [r5, #4]
   d47ac:	f7ff ff08 	bl	d45c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d47b0:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d47b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d47b4:	4622      	mov	r2, r4
   d47b6:	6868      	ldr	r0, [r5, #4]
   d47b8:	f7ff ff02 	bl	d45c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d47bc:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d47be:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d47c0:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d47c2:	2e00      	cmp	r6, #0
   d47c4:	d034      	beq.n	d4830 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d47c6:	2900      	cmp	r1, #0
   d47c8:	d132      	bne.n	d4830 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d47ca:	6873      	ldr	r3, [r6, #4]
   d47cc:	2b02      	cmp	r3, #2
   d47ce:	d002      	beq.n	d47d6 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d47d0:	2b0a      	cmp	r3, #10
   d47d2:	d009      	beq.n	d47e8 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d47d4:	e02a      	b.n	d482c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d47d6:	f1b8 0f00 	cmp.w	r8, #0
   d47da:	d027      	beq.n	d482c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d47dc:	6971      	ldr	r1, [r6, #20]
   d47de:	4638      	mov	r0, r7
   d47e0:	3104      	adds	r1, #4
   d47e2:	f000 fa74 	bl	d4cce <_ZN9IPAddressaSEPKh>
   d47e6:	e020      	b.n	d482a <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d47e8:	f1b9 0f00 	cmp.w	r9, #0
   d47ec:	d01e      	beq.n	d482c <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d47ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d47f0:	2211      	movs	r2, #17
   d47f2:	a801      	add	r0, sp, #4
   d47f4:	f002 fb05 	bl	d6e02 <memset>
                    a.v = 6;
   d47f8:	2306      	movs	r3, #6
   d47fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d47fe:	ad01      	add	r5, sp, #4
   d4800:	f104 0308 	add.w	r3, r4, #8
   d4804:	3418      	adds	r4, #24
   d4806:	6818      	ldr	r0, [r3, #0]
   d4808:	6859      	ldr	r1, [r3, #4]
   d480a:	462a      	mov	r2, r5
   d480c:	c203      	stmia	r2!, {r0, r1}
   d480e:	3308      	adds	r3, #8
   d4810:	42a3      	cmp	r3, r4
   d4812:	4615      	mov	r5, r2
   d4814:	d1f7      	bne.n	d4806 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4816:	a901      	add	r1, sp, #4
   d4818:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d481a:	ad07      	add	r5, sp, #28
   d481c:	f000 fa38 	bl	d4c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4822:	1d3c      	adds	r4, r7, #4
   d4824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4826:	682b      	ldr	r3, [r5, #0]
   d4828:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d482a:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d482c:	69f6      	ldr	r6, [r6, #28]
   d482e:	e7c8      	b.n	d47c2 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4830:	9800      	ldr	r0, [sp, #0]
   d4832:	f7ff fe85 	bl	d4540 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4836:	4638      	mov	r0, r7
   d4838:	b015      	add	sp, #84	; 0x54
   d483a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4840 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4840:	4b02      	ldr	r3, [pc, #8]	; (d484c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4842:	4a03      	ldr	r2, [pc, #12]	; (d4850 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4844:	601a      	str	r2, [r3, #0]
   d4846:	2200      	movs	r2, #0
   d4848:	605a      	str	r2, [r3, #4]
   d484a:	4770      	bx	lr
   d484c:	2003e3c8 	.word	0x2003e3c8
   d4850:	000d6f10 	.word	0x000d6f10

000d4854 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4854:	2200      	movs	r2, #0
   d4856:	4611      	mov	r1, r2
   d4858:	6840      	ldr	r0, [r0, #4]
   d485a:	f7ff beb1 	b.w	d45c0 <network_ready>

000d485e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d485e:	2200      	movs	r2, #0
   d4860:	4611      	mov	r1, r2
   d4862:	6840      	ldr	r0, [r0, #4]
   d4864:	f7ff becc 	b.w	d4600 <network_listening>

000d4868 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4868:	2200      	movs	r2, #0
   d486a:	4611      	mov	r1, r2
   d486c:	6840      	ldr	r0, [r0, #4]
   d486e:	f7ff bed7 	b.w	d4620 <network_get_listen_timeout>

000d4872 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4872:	2200      	movs	r2, #0
   d4874:	6840      	ldr	r0, [r0, #4]
   d4876:	f7ff becb 	b.w	d4610 <network_set_listen_timeout>

000d487a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d487a:	2200      	movs	r2, #0
   d487c:	f081 0101 	eor.w	r1, r1, #1
   d4880:	6840      	ldr	r0, [r0, #4]
   d4882:	f7ff beb5 	b.w	d45f0 <network_listen>

000d4886 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4886:	2300      	movs	r3, #0
   d4888:	461a      	mov	r2, r3
   d488a:	4619      	mov	r1, r3
   d488c:	6840      	ldr	r0, [r0, #4]
   d488e:	f7ff bea7 	b.w	d45e0 <network_off>

000d4892 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4892:	2300      	movs	r3, #0
   d4894:	461a      	mov	r2, r3
   d4896:	4619      	mov	r1, r3
   d4898:	6840      	ldr	r0, [r0, #4]
   d489a:	f7ff be99 	b.w	d45d0 <network_on>

000d489e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d489e:	2200      	movs	r2, #0
   d48a0:	4611      	mov	r1, r2
   d48a2:	6840      	ldr	r0, [r0, #4]
   d48a4:	f7ff be7c 	b.w	d45a0 <network_connecting>

000d48a8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48a8:	2200      	movs	r2, #0
   d48aa:	2102      	movs	r1, #2
   d48ac:	6840      	ldr	r0, [r0, #4]
   d48ae:	f7ff be7f 	b.w	d45b0 <network_disconnect>

000d48b2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d48b2:	2300      	movs	r3, #0
   d48b4:	461a      	mov	r2, r3
   d48b6:	6840      	ldr	r0, [r0, #4]
   d48b8:	f7ff be6a 	b.w	d4590 <network_connect>

000d48bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d48bc:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d48be:	2204      	movs	r2, #4
   d48c0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d48c2:	4a02      	ldr	r2, [pc, #8]	; (d48cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d48c4:	601a      	str	r2, [r3, #0]
   d48c6:	4770      	bx	lr
   d48c8:	2003e3d0 	.word	0x2003e3d0
   d48cc:	000d6f44 	.word	0x000d6f44

000d48d0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48d0:	2200      	movs	r2, #0
   d48d2:	4611      	mov	r1, r2
   d48d4:	6840      	ldr	r0, [r0, #4]
   d48d6:	f7ff be93 	b.w	d4600 <network_listening>

000d48da <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48da:	2200      	movs	r2, #0
   d48dc:	4611      	mov	r1, r2
   d48de:	6840      	ldr	r0, [r0, #4]
   d48e0:	f7ff be9e 	b.w	d4620 <network_get_listen_timeout>

000d48e4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48e4:	2200      	movs	r2, #0
   d48e6:	6840      	ldr	r0, [r0, #4]
   d48e8:	f7ff be92 	b.w	d4610 <network_set_listen_timeout>

000d48ec <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48ec:	2200      	movs	r2, #0
   d48ee:	f081 0101 	eor.w	r1, r1, #1
   d48f2:	6840      	ldr	r0, [r0, #4]
   d48f4:	f7ff be7c 	b.w	d45f0 <network_listen>

000d48f8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d48f8:	2300      	movs	r3, #0
   d48fa:	461a      	mov	r2, r3
   d48fc:	2101      	movs	r1, #1
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	f7ff be6e 	b.w	d45e0 <network_off>

000d4904 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4904:	2300      	movs	r3, #0
   d4906:	461a      	mov	r2, r3
   d4908:	4619      	mov	r1, r3
   d490a:	6840      	ldr	r0, [r0, #4]
   d490c:	f7ff be60 	b.w	d45d0 <network_on>

000d4910 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4910:	2200      	movs	r2, #0
   d4912:	4611      	mov	r1, r2
   d4914:	6840      	ldr	r0, [r0, #4]
   d4916:	f7ff be53 	b.w	d45c0 <network_ready>

000d491a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d491a:	2200      	movs	r2, #0
   d491c:	4611      	mov	r1, r2
   d491e:	6840      	ldr	r0, [r0, #4]
   d4920:	f7ff be3e 	b.w	d45a0 <network_connecting>

000d4924 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4924:	2200      	movs	r2, #0
   d4926:	2102      	movs	r1, #2
   d4928:	6840      	ldr	r0, [r0, #4]
   d492a:	f7ff be41 	b.w	d45b0 <network_disconnect>

000d492e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d492e:	2300      	movs	r3, #0
   d4930:	461a      	mov	r2, r3
   d4932:	6840      	ldr	r0, [r0, #4]
   d4934:	f7ff be2c 	b.w	d4590 <network_connect>

000d4938 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4938:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d493a:	4605      	mov	r5, r0
   d493c:	b188      	cbz	r0, d4962 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d493e:	6804      	ldr	r4, [r0, #0]
   d4940:	b14c      	cbz	r4, d4956 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4942:	68a3      	ldr	r3, [r4, #8]
   d4944:	b11b      	cbz	r3, d494e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4946:	2203      	movs	r2, #3
   d4948:	4621      	mov	r1, r4
   d494a:	4620      	mov	r0, r4
   d494c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d494e:	2110      	movs	r1, #16
   d4950:	4620      	mov	r0, r4
   d4952:	f001 f81d 	bl	d5990 <_ZdlPvj>
   d4956:	4628      	mov	r0, r5
   d4958:	2114      	movs	r1, #20
      }
   d495a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d495e:	f001 b817 	b.w	d5990 <_ZdlPvj>
   d4962:	bd38      	pop	{r3, r4, r5, pc}

000d4964 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4964:	b110      	cbz	r0, d496c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4966:	6803      	ldr	r3, [r0, #0]
   d4968:	685b      	ldr	r3, [r3, #4]
   d496a:	4718      	bx	r3
   d496c:	4770      	bx	lr

000d496e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d496e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4970:	6803      	ldr	r3, [r0, #0]
   d4972:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4974:	b1bb      	cbz	r3, d49a6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4976:	6858      	ldr	r0, [r3, #4]
   d4978:	f7ff fd82 	bl	d4480 <os_thread_is_current>
   d497c:	b978      	cbnz	r0, d499e <_ZN6ThreadD1Ev+0x30>
   d497e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4980:	7c5a      	ldrb	r2, [r3, #17]
   d4982:	b912      	cbnz	r2, d498a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4984:	6858      	ldr	r0, [r3, #4]
   d4986:	f7ff fd83 	bl	d4490 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d498a:	6823      	ldr	r3, [r4, #0]
   d498c:	6858      	ldr	r0, [r3, #4]
   d498e:	f7ff fd87 	bl	d44a0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4992:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4994:	2300      	movs	r3, #0
   d4996:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4998:	b128      	cbz	r0, d49a6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d499a:	f7ff ffcd 	bl	d4938 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d499e:	6820      	ldr	r0, [r4, #0]
   d49a0:	b108      	cbz	r0, d49a6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d49a2:	f7ff ffc9 	bl	d4938 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d49a6:	4620      	mov	r0, r4
   d49a8:	bd10      	pop	{r4, pc}
	...

000d49ac <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d49ac:	b538      	push	{r3, r4, r5, lr}
   d49ae:	4b0c      	ldr	r3, [pc, #48]	; (d49e0 <_ZN5spark9MeshClassD1Ev+0x34>)
   d49b0:	6003      	str	r3, [r0, #0]
   d49b2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49b4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d49b8:	b108      	cbz	r0, d49be <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d49ba:	f7ff fb72 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49be:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d49c2:	b135      	cbz	r5, d49d2 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49c4:	4628      	mov	r0, r5
   d49c6:	f7ff ffd2 	bl	d496e <_ZN6ThreadD1Ev>
   d49ca:	2104      	movs	r1, #4
   d49cc:	4628      	mov	r0, r5
   d49ce:	f000 ffdf 	bl	d5990 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49d2:	68a0      	ldr	r0, [r4, #8]
   d49d4:	b108      	cbz	r0, d49da <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d49d6:	f7ff ffc5 	bl	d4964 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d49da:	4620      	mov	r0, r4
   d49dc:	bd38      	pop	{r3, r4, r5, pc}
   d49de:	bf00      	nop
   d49e0:	000d6f78 	.word	0x000d6f78

000d49e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d49e4:	b538      	push	{r3, r4, r5, lr}
   d49e6:	4c0e      	ldr	r4, [pc, #56]	; (d4a20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d49e8:	4b0e      	ldr	r3, [pc, #56]	; (d4a24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d49ea:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d49ec:	2500      	movs	r5, #0
   d49ee:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d49f0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d49f4:	6063      	str	r3, [r4, #4]
   d49f6:	60a5      	str	r5, [r4, #8]
   d49f8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d49fc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4a00:	f7ff fd5e 	bl	d44c0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4a04:	4b08      	ldr	r3, [pc, #32]	; (d4a28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4a06:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a0a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4a0e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4a10:	4620      	mov	r0, r4
   d4a12:	4a06      	ldr	r2, [pc, #24]	; (d4a2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4a14:	4906      	ldr	r1, [pc, #24]	; (d4a30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4a1a:	f000 bfb4 	b.w	d5986 <__aeabi_atexit>
   d4a1e:	bf00      	nop
   d4a20:	2003e3d8 	.word	0x2003e3d8
   d4a24:	000d6f10 	.word	0x000d6f10
   d4a28:	000d6f78 	.word	0x000d6f78
   d4a2c:	2003e3c0 	.word	0x2003e3c0
   d4a30:	000d49ad 	.word	0x000d49ad

000d4a34 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4a34:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a36:	6883      	ldr	r3, [r0, #8]
   d4a38:	4604      	mov	r4, r0
   d4a3a:	b90b      	cbnz	r3, d4a40 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4a3c:	f000 ffaa 	bl	d5994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a40:	68c3      	ldr	r3, [r0, #12]
   d4a42:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4a44:	68a3      	ldr	r3, [r4, #8]
   d4a46:	b11b      	cbz	r3, d4a50 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a48:	2203      	movs	r2, #3
   d4a4a:	4621      	mov	r1, r4
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4a50:	4620      	mov	r0, r4
   d4a52:	2110      	movs	r1, #16
}
   d4a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4a58:	f000 bf9a 	b.w	d5990 <_ZdlPvj>

000d4a5c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d4a5c:	4770      	bx	lr

000d4a5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a60:	4606      	mov	r6, r0
   d4a62:	4615      	mov	r5, r2
   d4a64:	460c      	mov	r4, r1
   d4a66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a68:	42bc      	cmp	r4, r7
   d4a6a:	d006      	beq.n	d4a7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4a6c:	6833      	ldr	r3, [r6, #0]
   d4a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4a72:	689b      	ldr	r3, [r3, #8]
   d4a74:	4630      	mov	r0, r6
   d4a76:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4a78:	e7f6      	b.n	d4a68 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4a7a:	4628      	mov	r0, r5
   d4a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a7e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4a7e:	2200      	movs	r2, #0
   d4a80:	7c00      	ldrb	r0, [r0, #16]
   d4a82:	f7ff bc7d 	b.w	d4380 <HAL_I2C_Write_Data>

000d4a86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4a86:	2100      	movs	r1, #0
   d4a88:	7c00      	ldrb	r0, [r0, #16]
   d4a8a:	f7ff bc81 	b.w	d4390 <HAL_I2C_Available_Data>

000d4a8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4a8e:	2100      	movs	r1, #0
   d4a90:	7c00      	ldrb	r0, [r0, #16]
   d4a92:	f7ff bc85 	b.w	d43a0 <HAL_I2C_Read_Data>

000d4a96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4a96:	2100      	movs	r1, #0
   d4a98:	7c00      	ldrb	r0, [r0, #16]
   d4a9a:	f7ff bc89 	b.w	d43b0 <HAL_I2C_Peek_Data>

000d4a9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4a9e:	2100      	movs	r1, #0
   d4aa0:	7c00      	ldrb	r0, [r0, #16]
   d4aa2:	f7ff bc8d 	b.w	d43c0 <HAL_I2C_Flush_Data>

000d4aa6 <_ZN7TwoWireD0Ev>:
   d4aa6:	b510      	push	{r4, lr}
   d4aa8:	2114      	movs	r1, #20
   d4aaa:	4604      	mov	r4, r0
   d4aac:	f000 ff70 	bl	d5990 <_ZdlPvj>
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	bd10      	pop	{r4, pc}

000d4ab4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ab4:	b510      	push	{r4, lr}
   d4ab6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4abc:	4608      	mov	r0, r1
   d4abe:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	4b04      	ldr	r3, [pc, #16]	; (d4ad4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d4ac4:	7420      	strb	r0, [r4, #16]
   d4ac6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d4ac8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d4aca:	f7ff fc89 	bl	d43e0 <HAL_I2C_Init>

}
   d4ace:	4620      	mov	r0, r4
   d4ad0:	bd10      	pop	{r4, pc}
   d4ad2:	bf00      	nop
   d4ad4:	000d6fac 	.word	0x000d6fac

000d4ad8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4ad8:	2100      	movs	r1, #0
   d4ada:	7c00      	ldrb	r0, [r0, #16]
   d4adc:	f7ff bc78 	b.w	d43d0 <HAL_I2C_Is_Enabled>

000d4ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4ae0:	680b      	ldr	r3, [r1, #0]
   d4ae2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4ae4:	b113      	cbz	r3, d4aec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4ae6:	685a      	ldr	r2, [r3, #4]
   d4ae8:	3201      	adds	r2, #1
   d4aea:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4aec:	4770      	bx	lr

000d4aee <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4aee:	7441      	strb	r1, [r0, #17]
   d4af0:	4770      	bx	lr

000d4af2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4af2:	4770      	bx	lr

000d4af4 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4af4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4af6:	2100      	movs	r1, #0
   d4af8:	7c00      	ldrb	r0, [r0, #16]
   d4afa:	f7ff fc29 	bl	d4350 <HAL_USB_USART_Receive_Data>
}
   d4afe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b02:	bf28      	it	cs
   d4b04:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b08:	bd08      	pop	{r3, pc}

000d4b0a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4b0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4b0c:	2101      	movs	r1, #1
   d4b0e:	7c00      	ldrb	r0, [r0, #16]
   d4b10:	f7ff fc1e 	bl	d4350 <HAL_USB_USART_Receive_Data>
}
   d4b14:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b18:	bf28      	it	cs
   d4b1a:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b1e:	bd08      	pop	{r3, pc}

000d4b20 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4b20:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b22:	7c00      	ldrb	r0, [r0, #16]
   d4b24:	f7ff fc0c 	bl	d4340 <HAL_USB_USART_Available_Data_For_Write>
}
   d4b28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b2c:	bd08      	pop	{r3, pc}

000d4b2e <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4b2e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b30:	7c00      	ldrb	r0, [r0, #16]
   d4b32:	f7ff fbfd 	bl	d4330 <HAL_USB_USART_Available_Data>
}
   d4b36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b3a:	bd08      	pop	{r3, pc}

000d4b3c <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b3c:	7c00      	ldrb	r0, [r0, #16]
   d4b3e:	f7ff bc17 	b.w	d4370 <HAL_USB_USART_Flush_Data>

000d4b42 <_ZN9USBSerialD0Ev>:
   d4b42:	b510      	push	{r4, lr}
   d4b44:	2114      	movs	r1, #20
   d4b46:	4604      	mov	r4, r0
   d4b48:	f000 ff22 	bl	d5990 <_ZdlPvj>
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b50:	b538      	push	{r3, r4, r5, lr}
   d4b52:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b54:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b56:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b58:	f7ff fbf2 	bl	d4340 <HAL_USB_USART_Available_Data_For_Write>
   d4b5c:	2800      	cmp	r0, #0
   d4b5e:	dc01      	bgt.n	d4b64 <_ZN9USBSerial5writeEh+0x14>
   d4b60:	7c60      	ldrb	r0, [r4, #17]
   d4b62:	b128      	cbz	r0, d4b70 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4b64:	4629      	mov	r1, r5
   d4b66:	7c20      	ldrb	r0, [r4, #16]
   d4b68:	f7ff fbfa 	bl	d4360 <HAL_USB_USART_Send_Data>
   d4b6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4b70:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b74:	b510      	push	{r4, lr}
   d4b76:	4604      	mov	r4, r0
   d4b78:	2300      	movs	r3, #0
   d4b7a:	6063      	str	r3, [r4, #4]
   d4b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b80:	60a3      	str	r3, [r4, #8]
   d4b82:	4b05      	ldr	r3, [pc, #20]	; (d4b98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4b84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4b86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b88:	4608      	mov	r0, r1
{
  _serial = serial;
   d4b8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4b8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4b8e:	4611      	mov	r1, r2
   d4b90:	f7ff fbbe 	bl	d4310 <HAL_USB_USART_Init>
}
   d4b94:	4620      	mov	r0, r4
   d4b96:	bd10      	pop	{r4, pc}
   d4b98:	000d6fd4 	.word	0x000d6fd4

000d4b9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4b9c:	2200      	movs	r2, #0
   d4b9e:	7c00      	ldrb	r0, [r0, #16]
   d4ba0:	f7ff bbbe 	b.w	d4320 <HAL_USB_USART_Begin>

000d4ba4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ba4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4ba6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ba8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4baa:	2100      	movs	r1, #0
   d4bac:	f002 f929 	bl	d6e02 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4bb0:	4620      	mov	r0, r4
   d4bb2:	bd10      	pop	{r4, pc}

000d4bb4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4bb4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bb6:	4d0e      	ldr	r5, [pc, #56]	; (d4bf0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4bb8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4bba:	a801      	add	r0, sp, #4
   d4bbc:	f7ff fff2 	bl	d4ba4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bc0:	6829      	ldr	r1, [r5, #0]
   d4bc2:	f011 0401 	ands.w	r4, r1, #1
   d4bc6:	d110      	bne.n	d4bea <_Z16_fetch_usbserialv+0x36>
   d4bc8:	4628      	mov	r0, r5
   d4bca:	f7ff fa6c 	bl	d40a6 <__cxa_guard_acquire>
   d4bce:	b160      	cbz	r0, d4bea <_Z16_fetch_usbserialv+0x36>
   d4bd0:	aa01      	add	r2, sp, #4
   d4bd2:	4621      	mov	r1, r4
   d4bd4:	4807      	ldr	r0, [pc, #28]	; (d4bf4 <_Z16_fetch_usbserialv+0x40>)
   d4bd6:	f7ff ffcd 	bl	d4b74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4bda:	4628      	mov	r0, r5
   d4bdc:	f7ff fa68 	bl	d40b0 <__cxa_guard_release>
   d4be0:	4a05      	ldr	r2, [pc, #20]	; (d4bf8 <_Z16_fetch_usbserialv+0x44>)
   d4be2:	4906      	ldr	r1, [pc, #24]	; (d4bfc <_Z16_fetch_usbserialv+0x48>)
   d4be4:	4803      	ldr	r0, [pc, #12]	; (d4bf4 <_Z16_fetch_usbserialv+0x40>)
   d4be6:	f000 fece 	bl	d5986 <__aeabi_atexit>
	return _usbserial;
}
   d4bea:	4802      	ldr	r0, [pc, #8]	; (d4bf4 <_Z16_fetch_usbserialv+0x40>)
   d4bec:	b007      	add	sp, #28
   d4bee:	bd30      	pop	{r4, r5, pc}
   d4bf0:	2003e5ac 	.word	0x2003e5ac
   d4bf4:	2003e5b0 	.word	0x2003e5b0
   d4bf8:	2003e3c0 	.word	0x2003e3c0
   d4bfc:	000d4af3 	.word	0x000d4af3

000d4c00 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c00:	4770      	bx	lr

000d4c02 <_ZN9IPAddressD0Ev>:
   d4c02:	b510      	push	{r4, lr}
   d4c04:	2118      	movs	r1, #24
   d4c06:	4604      	mov	r4, r0
   d4c08:	f000 fec2 	bl	d5990 <_ZdlPvj>
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	bd10      	pop	{r4, pc}

000d4c10 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c10:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c12:	7d03      	ldrb	r3, [r0, #20]
   d4c14:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c16:	b08d      	sub	sp, #52	; 0x34
   d4c18:	460e      	mov	r6, r1
   d4c1a:	f100 0704 	add.w	r7, r0, #4
   d4c1e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c22:	d002      	beq.n	d4c2a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c24:	f100 0508 	add.w	r5, r0, #8
   d4c28:	e018      	b.n	d4c5c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c2a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c2c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c2e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c32:	232f      	movs	r3, #47	; 0x2f
   d4c34:	462a      	mov	r2, r5
   d4c36:	200a      	movs	r0, #10
   d4c38:	f7ff fc1a 	bl	d4470 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c3c:	4628      	mov	r0, r5
   d4c3e:	f002 f92c 	bl	d6e9a <strlen>
   d4c42:	6833      	ldr	r3, [r6, #0]
   d4c44:	4602      	mov	r2, r0
   d4c46:	68db      	ldr	r3, [r3, #12]
   d4c48:	4629      	mov	r1, r5
   d4c4a:	4630      	mov	r0, r6
   d4c4c:	4798      	blx	r3
   d4c4e:	e00f      	b.n	d4c70 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4c50:	b124      	cbz	r4, d4c5c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4c52:	212e      	movs	r1, #46	; 0x2e
   d4c54:	4630      	mov	r0, r6
   d4c56:	f000 fbd3 	bl	d5400 <_ZN5Print5printEc>
   d4c5a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4c5c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c60:	220a      	movs	r2, #10
   d4c62:	4630      	mov	r0, r6
   d4c64:	f000 fc12 	bl	d548c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c68:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c6a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c6c:	d1f0      	bne.n	d4c50 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c6e:	4620      	mov	r0, r4
    }
    return n;
}
   d4c70:	b00d      	add	sp, #52	; 0x34
   d4c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c74 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4c74:	b510      	push	{r4, lr}
   d4c76:	4b05      	ldr	r3, [pc, #20]	; (d4c8c <_ZN9IPAddressC1Ev+0x18>)
   d4c78:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c7a:	2211      	movs	r2, #17
   d4c7c:	f840 3b04 	str.w	r3, [r0], #4
   d4c80:	2100      	movs	r1, #0
   d4c82:	f002 f8be 	bl	d6e02 <memset>
{
    clear();
}
   d4c86:	4620      	mov	r0, r4
   d4c88:	bd10      	pop	{r4, pc}
   d4c8a:	bf00      	nop
   d4c8c:	000d7004 	.word	0x000d7004

000d4c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4c90:	4603      	mov	r3, r0
   d4c92:	4a07      	ldr	r2, [pc, #28]	; (d4cb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4c94:	b510      	push	{r4, lr}
   d4c96:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4c9a:	f101 0210 	add.w	r2, r1, #16
   d4c9e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ca2:	f843 4b04 	str.w	r4, [r3], #4
   d4ca6:	4291      	cmp	r1, r2
   d4ca8:	d1f9      	bne.n	d4c9e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4caa:	780a      	ldrb	r2, [r1, #0]
   d4cac:	701a      	strb	r2, [r3, #0]
}
   d4cae:	bd10      	pop	{r4, pc}
   d4cb0:	000d7004 	.word	0x000d7004

000d4cb4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4cb4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4cb6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4cba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4cbe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4cc2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4cc6:	2304      	movs	r3, #4
   d4cc8:	6041      	str	r1, [r0, #4]
   d4cca:	7503      	strb	r3, [r0, #20]
   d4ccc:	bd10      	pop	{r4, pc}

000d4cce <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4cce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4cd0:	780d      	ldrb	r5, [r1, #0]
   d4cd2:	788b      	ldrb	r3, [r1, #2]
   d4cd4:	784a      	ldrb	r2, [r1, #1]
   d4cd6:	78c9      	ldrb	r1, [r1, #3]
   d4cd8:	9100      	str	r1, [sp, #0]
   d4cda:	4629      	mov	r1, r5
   d4cdc:	f7ff ffea 	bl	d4cb4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4ce0:	b003      	add	sp, #12
   d4ce2:	bd30      	pop	{r4, r5, pc}

000d4ce4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4ce4:	4770      	bx	lr

000d4ce6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4ce6:	2000      	movs	r0, #0
   d4ce8:	4770      	bx	lr

000d4cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4cea:	b510      	push	{r4, lr}
   d4cec:	2110      	movs	r1, #16
   d4cee:	4604      	mov	r4, r0
   d4cf0:	f000 fe4e 	bl	d5990 <_ZdlPvj>
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	bd10      	pop	{r4, pc}

000d4cf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4cf8:	b508      	push	{r3, lr}
      { delete this; }
   d4cfa:	b108      	cbz	r0, d4d00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4cfc:	f7ff fff5 	bl	d4cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d00:	bd08      	pop	{r3, pc}

000d4d02 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4d02:	2200      	movs	r2, #0
   d4d04:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4d06:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4d08:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4d0c:	8082      	strh	r2, [r0, #4]
   d4d0e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4d12:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d14:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d16:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4d18:	680c      	ldr	r4, [r1, #0]
   d4d1a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d1c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4d1e:	bd10      	pop	{r4, pc}

000d4d20 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4d20:	b510      	push	{r4, lr}
   d4d22:	4604      	mov	r4, r0
    free((void*)msg_);
   d4d24:	6800      	ldr	r0, [r0, #0]
   d4d26:	f7ff fcbf 	bl	d46a8 <free>
}
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	bd10      	pop	{r4, pc}

000d4d2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4d2e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4d30:	68c4      	ldr	r4, [r0, #12]
   d4d32:	b1f4      	cbz	r4, d4d72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4d34:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4d36:	2b02      	cmp	r3, #2
   d4d38:	d103      	bne.n	d4d42 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4d3a:	f104 000c 	add.w	r0, r4, #12
   d4d3e:	f7ff ffef 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4d42:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4d44:	b135      	cbz	r5, d4d54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d46:	4628      	mov	r0, r5
   d4d48:	f7ff fcd6 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>
   d4d4c:	2110      	movs	r1, #16
   d4d4e:	4628      	mov	r0, r5
   d4d50:	f000 fe1e 	bl	d5990 <_ZdlPvj>
   d4d54:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4d56:	b135      	cbz	r5, d4d66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4d58:	4628      	mov	r0, r5
   d4d5a:	f7ff fccd 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>
   d4d5e:	2110      	movs	r1, #16
   d4d60:	4628      	mov	r0, r5
   d4d62:	f000 fe15 	bl	d5990 <_ZdlPvj>
   d4d66:	4620      	mov	r0, r4
   d4d68:	2114      	movs	r1, #20
   d4d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4d6e:	f000 be0f 	b.w	d5990 <_ZdlPvj>
   d4d72:	bd38      	pop	{r3, r4, r5, pc}

000d4d74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4d74:	b513      	push	{r0, r1, r4, lr}
   d4d76:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4d78:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4d7c:	2300      	movs	r3, #0
   d4d7e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d80:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4d82:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4d84:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d86:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4d88:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4d8a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4d8c:	f7ff f99c 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4d90:	4620      	mov	r0, r4
   d4d92:	b002      	add	sp, #8
   d4d94:	bd10      	pop	{r4, pc}

000d4d96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4d96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4d98:	460c      	mov	r4, r1
   d4d9a:	ad02      	add	r5, sp, #8
   d4d9c:	f854 3b04 	ldr.w	r3, [r4], #4
   d4da0:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4da4:	4606      	mov	r6, r0
   d4da6:	460f      	mov	r7, r1
   d4da8:	a801      	add	r0, sp, #4
   d4daa:	4621      	mov	r1, r4
   d4dac:	f7ff fe98 	bl	d4ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4db0:	4629      	mov	r1, r5
   d4db2:	4630      	mov	r0, r6
   d4db4:	f7ff ffde 	bl	d4d74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4db8:	a801      	add	r0, sp, #4
   d4dba:	f7ff f985 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dbe:	4620      	mov	r0, r4
   d4dc0:	f7ff f982 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4dc4:	4638      	mov	r0, r7
   d4dc6:	2108      	movs	r1, #8
   d4dc8:	f000 fde2 	bl	d5990 <_ZdlPvj>
        return p;
    }
   d4dcc:	4630      	mov	r0, r6
   d4dce:	b003      	add	sp, #12
   d4dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4dd2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4dd2:	b513      	push	{r0, r1, r4, lr}
   d4dd4:	460b      	mov	r3, r1
   d4dd6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4dd8:	c803      	ldmia	r0, {r0, r1}
   d4dda:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4dde:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4de2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4de6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4dea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4dee:	b002      	add	sp, #8
   d4df0:	bd10      	pop	{r4, pc}
	...

000d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4df4:	b538      	push	{r3, r4, r5, lr}
   d4df6:	2300      	movs	r3, #0
   d4df8:	4604      	mov	r4, r0
   d4dfa:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4dfc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4dfe:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e00:	f7ff f94b 	bl	d409a <_Znwj>
   d4e04:	b128      	cbz	r0, d4e12 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4e06:	2301      	movs	r3, #1
   d4e08:	6043      	str	r3, [r0, #4]
   d4e0a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4e0c:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4e0e:	6003      	str	r3, [r0, #0]
   d4e10:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4e12:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4e14:	4620      	mov	r0, r4
   d4e16:	bd38      	pop	{r3, r4, r5, pc}
   d4e18:	000d7018 	.word	0x000d7018

000d4e1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e1c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e1e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e20:	b90a      	cbnz	r2, d4e26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4e22:	f000 fdb7 	bl	d5994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e26:	68c3      	ldr	r3, [r0, #12]
    }
   d4e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e2c:	4718      	bx	r3

000d4e2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e2e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e30:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e32:	f100 0110 	add.w	r1, r0, #16
   d4e36:	f7ff fff1 	bl	d4e1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4e3a:	bd08      	pop	{r3, pc}

000d4e3c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e3c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4e3e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e40:	b90a      	cbnz	r2, d4e46 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4e42:	f000 fda7 	bl	d5994 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e46:	68c3      	ldr	r3, [r0, #12]
    }
   d4e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e4c:	4718      	bx	r3

000d4e4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e4e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4e50:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4e52:	f100 0110 	add.w	r1, r0, #16
   d4e56:	f7ff fff1 	bl	d4e3c <_ZNKSt8functionIFvRKbEEclES1_>
   d4e5a:	bd08      	pop	{r3, pc}

000d4e5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e5c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e5e:	2300      	movs	r3, #0
   d4e60:	6083      	str	r3, [r0, #8]
   d4e62:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4e64:	4604      	mov	r4, r0
   d4e66:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4e68:	b12b      	cbz	r3, d4e76 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4e6a:	2202      	movs	r2, #2
   d4e6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4e6e:	68eb      	ldr	r3, [r5, #12]
   d4e70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4e72:	68ab      	ldr	r3, [r5, #8]
   d4e74:	60a3      	str	r3, [r4, #8]
	}
    }
   d4e76:	4620      	mov	r0, r4
   d4e78:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4e7e:	b089      	sub	sp, #36	; 0x24
   d4e80:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4e82:	4668      	mov	r0, sp
   d4e84:	f7ff ff3d 	bl	d4d02 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4e88:	2300      	movs	r3, #0
   d4e8a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4e8e:	f04f 0202 	mov.w	r2, #2
   d4e92:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4e96:	2b00      	cmp	r3, #0
   d4e98:	d103      	bne.n	d4ea2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4e9a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4e9e:	2900      	cmp	r1, #0
   d4ea0:	d1f7      	bne.n	d4e92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4ea2:	d002      	beq.n	d4eaa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4ea4:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ea8:	e063      	b.n	d4f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4eaa:	f114 050c 	adds.w	r5, r4, #12
   d4eae:	d003      	beq.n	d4eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4eb0:	4669      	mov	r1, sp
   d4eb2:	4628      	mov	r0, r5
   d4eb4:	f7ff ff25 	bl	d4d02 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4eb8:	f3bf 8f5f 	dmb	sy
   d4ebc:	2301      	movs	r3, #1
   d4ebe:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4ec0:	2000      	movs	r0, #0
   d4ec2:	f104 0308 	add.w	r3, r4, #8
   d4ec6:	f3bf 8f5f 	dmb	sy
   d4eca:	e853 6f00 	ldrex	r6, [r3]
   d4ece:	e843 0200 	strex	r2, r0, [r3]
   d4ed2:	2a00      	cmp	r2, #0
   d4ed4:	d1f9      	bne.n	d4eca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4ed6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4eda:	2e00      	cmp	r6, #0
   d4edc:	d049      	beq.n	d4f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4ede:	f7ff fbb7 	bl	d4650 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4ee2:	b120      	cbz	r0, d4eee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4ee4:	4629      	mov	r1, r5
   d4ee6:	4630      	mov	r0, r6
   d4ee8:	f7ff ff98 	bl	d4e1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4eec:	e03a      	b.n	d4f64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4eee:	4631      	mov	r1, r6
   d4ef0:	a802      	add	r0, sp, #8
   d4ef2:	f7ff ffb3 	bl	d4e5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4ef6:	68e0      	ldr	r0, [r4, #12]
   d4ef8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4efc:	b108      	cbz	r0, d4f02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4efe:	f001 ffb1 	bl	d6e64 <strdup>
   d4f02:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4f04:	2010      	movs	r0, #16
   d4f06:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4f0a:	f7ff f8c6 	bl	d409a <_Znwj>
   d4f0e:	4605      	mov	r5, r0
   d4f10:	b1e8      	cbz	r0, d4f4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f12:	2700      	movs	r7, #0
   d4f14:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f16:	2018      	movs	r0, #24
   d4f18:	f7ff f8bf 	bl	d409a <_Znwj>
   d4f1c:	4604      	mov	r4, r0
   d4f1e:	b188      	cbz	r0, d4f44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4f20:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f22:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4f24:	a802      	add	r0, sp, #8
   d4f26:	f7ff ff54 	bl	d4dd2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f2a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4f2c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f2e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f30:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4f32:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4f34:	a906      	add	r1, sp, #24
   d4f36:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f38:	60e3      	str	r3, [r4, #12]
   d4f3a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f3e:	9205      	str	r2, [sp, #20]
   d4f40:	f7ff fedf 	bl	d4d02 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4f44:	4b0d      	ldr	r3, [pc, #52]	; (d4f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4f46:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4f48:	4b0d      	ldr	r3, [pc, #52]	; (d4f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4f4a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4f4c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4f4e:	a806      	add	r0, sp, #24
   d4f50:	f7ff fee6 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f54:	a802      	add	r0, sp, #8
   d4f56:	f7ff fbcf 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	4629      	mov	r1, r5
   d4f5e:	4809      	ldr	r0, [pc, #36]	; (d4f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4f60:	f7ff fb7e 	bl	d4660 <application_thread_invoke>
   d4f64:	4630      	mov	r0, r6
   d4f66:	f7ff fbc7 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4f6a:	2110      	movs	r1, #16
   d4f6c:	4630      	mov	r0, r6
   d4f6e:	f000 fd0f 	bl	d5990 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4f72:	4668      	mov	r0, sp
   d4f74:	f7ff fed4 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
    }
   d4f78:	b009      	add	sp, #36	; 0x24
   d4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4f7c:	000d4e2f 	.word	0x000d4e2f
   d4f80:	000d50a5 	.word	0x000d50a5
   d4f84:	000d4a35 	.word	0x000d4a35

000d4f88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f8c:	b08b      	sub	sp, #44	; 0x2c
   d4f8e:	4606      	mov	r6, r0
   d4f90:	460f      	mov	r7, r1
   d4f92:	4690      	mov	r8, r2
   d4f94:	4699      	mov	r9, r3
   d4f96:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f9a:	f7ff fae1 	bl	d4560 <spark_cloud_flag_connected>
   d4f9e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d4fa0:	4683      	mov	fp, r0
   d4fa2:	bb30      	cbnz	r0, d4ff2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4fa4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4fa8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4faa:	a905      	add	r1, sp, #20
   d4fac:	4628      	mov	r0, r5
   d4fae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4fb2:	f7ff fea6 	bl	d4d02 <_ZN8particle5ErrorC1EOS0_>
   d4fb6:	2014      	movs	r0, #20
   d4fb8:	f7ff f86f 	bl	d409a <_Znwj>
   d4fbc:	4604      	mov	r4, r0
   d4fbe:	b158      	cbz	r0, d4fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4fc0:	2302      	movs	r3, #2
   d4fc2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4fc4:	2301      	movs	r3, #1
   d4fc6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4fc8:	f8c0 b004 	str.w	fp, [r0, #4]
   d4fcc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4fd0:	4629      	mov	r1, r5
   d4fd2:	300c      	adds	r0, #12
   d4fd4:	f7ff fe95 	bl	d4d02 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4fd8:	4630      	mov	r0, r6
   d4fda:	4621      	mov	r1, r4
   d4fdc:	f840 4b04 	str.w	r4, [r0], #4
   d4fe0:	f7ff ff08 	bl	d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4fe4:	4628      	mov	r0, r5
   d4fe6:	f7ff fe9b 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4fea:	a805      	add	r0, sp, #20
   d4fec:	f7ff fe98 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
   d4ff0:	e052      	b.n	d5098 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4ff2:	2400      	movs	r4, #0
   d4ff4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4ff6:	2014      	movs	r0, #20
   d4ff8:	606c      	str	r4, [r5, #4]
   d4ffa:	60ac      	str	r4, [r5, #8]
   d4ffc:	9307      	str	r3, [sp, #28]
   d4ffe:	f7ff f84c 	bl	d409a <_Znwj>
   d5002:	4601      	mov	r1, r0
   d5004:	b118      	cbz	r0, d500e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5006:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5008:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d500a:	6044      	str	r4, [r0, #4]
   d500c:	6084      	str	r4, [r0, #8]
   d500e:	a804      	add	r0, sp, #16
   d5010:	9103      	str	r1, [sp, #12]
   d5012:	f7ff feef 	bl	d4df4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5016:	4b22      	ldr	r3, [pc, #136]	; (d50a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5018:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d501a:	2008      	movs	r0, #8
   d501c:	f7ff f83d 	bl	d409a <_Znwj>
   d5020:	4604      	mov	r4, r0
   d5022:	b128      	cbz	r0, d5030 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5024:	9b03      	ldr	r3, [sp, #12]
   d5026:	f840 3b04 	str.w	r3, [r0], #4
   d502a:	a904      	add	r1, sp, #16
   d502c:	f7ff fd58 	bl	d4ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5030:	9500      	str	r5, [sp, #0]
   d5032:	fa5f f38a 	uxtb.w	r3, sl
   d5036:	464a      	mov	r2, r9
   d5038:	4641      	mov	r1, r8
   d503a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d503c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d503e:	f7ff fa97 	bl	d4570 <spark_send_event>
   d5042:	b920      	cbnz	r0, d504e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5044:	9b03      	ldr	r3, [sp, #12]
   d5046:	785b      	ldrb	r3, [r3, #1]
   d5048:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d504c:	b183      	cbz	r3, d5070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d504e:	9b03      	ldr	r3, [sp, #12]
   d5050:	9305      	str	r3, [sp, #20]
   d5052:	a904      	add	r1, sp, #16
   d5054:	a806      	add	r0, sp, #24
   d5056:	f7ff fd43 	bl	d4ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d505a:	a905      	add	r1, sp, #20
   d505c:	4630      	mov	r0, r6
   d505e:	f7ff fe89 	bl	d4d74 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5062:	a806      	add	r0, sp, #24
   d5064:	f7ff f830 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5068:	a804      	add	r0, sp, #16
   d506a:	f7ff f82d 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d506e:	e013      	b.n	d5098 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5070:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5074:	a905      	add	r1, sp, #20
   d5076:	a803      	add	r0, sp, #12
   d5078:	9205      	str	r2, [sp, #20]
   d507a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d507e:	f7ff fefd 	bl	d4e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5082:	a805      	add	r0, sp, #20
   d5084:	f7ff fe4c 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5088:	a805      	add	r0, sp, #20
   d508a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d508c:	f7ff fe83 	bl	d4d96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5090:	a806      	add	r0, sp, #24
   d5092:	f7ff f819 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5096:	e7da      	b.n	d504e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5098:	4630      	mov	r0, r6
   d509a:	b00b      	add	sp, #44	; 0x2c
   d509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50a0:	000d5215 	.word	0x000d5215

000d50a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d50a4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d50a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50a8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d50aa:	d006      	beq.n	d50ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d50ac:	2a03      	cmp	r2, #3
   d50ae:	d017      	beq.n	d50e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d50b0:	2a01      	cmp	r2, #1
   d50b2:	d122      	bne.n	d50fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d50b4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d50b6:	6003      	str	r3, [r0, #0]
	      break;
   d50b8:	e01f      	b.n	d50fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50ba:	2018      	movs	r0, #24
   d50bc:	680e      	ldr	r6, [r1, #0]
   d50be:	f7fe ffec 	bl	d409a <_Znwj>
   d50c2:	4605      	mov	r5, r0
   d50c4:	b150      	cbz	r0, d50dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d50c6:	4631      	mov	r1, r6
   d50c8:	f7ff fec8 	bl	d4e5c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d50cc:	6930      	ldr	r0, [r6, #16]
   d50ce:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d50d2:	b108      	cbz	r0, d50d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d50d4:	f001 fec6 	bl	d6e64 <strdup>
   d50d8:	6128      	str	r0, [r5, #16]
   d50da:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d50dc:	6025      	str	r5, [r4, #0]
   d50de:	e00c      	b.n	d50fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50e0:	6804      	ldr	r4, [r0, #0]
   d50e2:	b154      	cbz	r4, d50fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d50e4:	f104 0010 	add.w	r0, r4, #16
   d50e8:	f7ff fe1a 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50ec:	4620      	mov	r0, r4
   d50ee:	f7ff fb03 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d50f2:	2118      	movs	r1, #24
   d50f4:	4620      	mov	r0, r4
   d50f6:	f000 fc4b 	bl	d5990 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d50fa:	2000      	movs	r0, #0
   d50fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50fe <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50fe:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5100:	2300      	movs	r3, #0
   d5102:	6083      	str	r3, [r0, #8]
   d5104:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5106:	4604      	mov	r4, r0
   d5108:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d510a:	b12b      	cbz	r3, d5118 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d510c:	2202      	movs	r2, #2
   d510e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5110:	68eb      	ldr	r3, [r5, #12]
   d5112:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5114:	68ab      	ldr	r3, [r5, #8]
   d5116:	60a3      	str	r3, [r4, #8]
	}
    }
   d5118:	4620      	mov	r0, r4
   d511a:	bd38      	pop	{r3, r4, r5, pc}

000d511c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d511c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d511e:	b570      	push	{r4, r5, r6, lr}
   d5120:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5122:	d006      	beq.n	d5132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5124:	2a03      	cmp	r2, #3
   d5126:	d011      	beq.n	d514c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5128:	2a01      	cmp	r2, #1
   d512a:	d118      	bne.n	d515e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d512c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d512e:	6003      	str	r3, [r0, #0]
	      break;
   d5130:	e015      	b.n	d515e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5132:	2014      	movs	r0, #20
   d5134:	680e      	ldr	r6, [r1, #0]
   d5136:	f7fe ffb0 	bl	d409a <_Znwj>
   d513a:	4605      	mov	r5, r0
   d513c:	b120      	cbz	r0, d5148 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d513e:	4631      	mov	r1, r6
   d5140:	f7ff ffdd 	bl	d50fe <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5144:	7c33      	ldrb	r3, [r6, #16]
   d5146:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5148:	6025      	str	r5, [r4, #0]
   d514a:	e008      	b.n	d515e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d514c:	6804      	ldr	r4, [r0, #0]
   d514e:	b134      	cbz	r4, d515e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5150:	4620      	mov	r0, r4
   d5152:	f7ff fad1 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5156:	2114      	movs	r1, #20
   d5158:	4620      	mov	r0, r4
   d515a:	f000 fc19 	bl	d5990 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d515e:	2000      	movs	r0, #0
   d5160:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5164 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5164:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5166:	2300      	movs	r3, #0
   d5168:	b087      	sub	sp, #28
   d516a:	460c      	mov	r4, r1
   d516c:	f3bf 8f5f 	dmb	sy
   d5170:	e850 6f00 	ldrex	r6, [r0]
   d5174:	e840 3200 	strex	r2, r3, [r0]
   d5178:	2a00      	cmp	r2, #0
   d517a:	d1f9      	bne.n	d5170 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d517c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5180:	2e00      	cmp	r6, #0
   d5182:	d03f      	beq.n	d5204 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5184:	4618      	mov	r0, r3
   d5186:	f7ff fa63 	bl	d4650 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d518a:	4607      	mov	r7, r0
   d518c:	b120      	cbz	r0, d5198 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d518e:	4621      	mov	r1, r4
   d5190:	4630      	mov	r0, r6
   d5192:	f7ff fe53 	bl	d4e3c <_ZNKSt8functionIFvRKbEEclES1_>
   d5196:	e02e      	b.n	d51f6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5198:	4631      	mov	r1, r6
   d519a:	a801      	add	r0, sp, #4
   d519c:	f7ff ffaf 	bl	d50fe <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d51a0:	7823      	ldrb	r3, [r4, #0]
   d51a2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d51a6:	2010      	movs	r0, #16
   d51a8:	f7fe ff77 	bl	d409a <_Znwj>
   d51ac:	4605      	mov	r5, r0
   d51ae:	b1d0      	cbz	r0, d51e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51b0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51b2:	2014      	movs	r0, #20
   d51b4:	f7fe ff71 	bl	d409a <_Znwj>
   d51b8:	4604      	mov	r4, r0
   d51ba:	b178      	cbz	r0, d51dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51bc:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d51be:	4601      	mov	r1, r0
   d51c0:	a801      	add	r0, sp, #4
   d51c2:	f7ff fe06 	bl	d4dd2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51c6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d51c8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d51ca:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d51cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d51ce:	9203      	str	r2, [sp, #12]
   d51d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d51d2:	60e3      	str	r3, [r4, #12]
   d51d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d51d8:	9204      	str	r2, [sp, #16]
   d51da:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d51dc:	4b0a      	ldr	r3, [pc, #40]	; (d5208 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d51de:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d51e0:	4b0a      	ldr	r3, [pc, #40]	; (d520c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d51e2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d51e4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51e6:	a801      	add	r0, sp, #4
   d51e8:	f7ff fa86 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d51ec:	2200      	movs	r2, #0
   d51ee:	4629      	mov	r1, r5
   d51f0:	4807      	ldr	r0, [pc, #28]	; (d5210 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d51f2:	f7ff fa35 	bl	d4660 <application_thread_invoke>
   d51f6:	4630      	mov	r0, r6
   d51f8:	f7ff fa7e 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d51fc:	2110      	movs	r1, #16
   d51fe:	4630      	mov	r0, r6
   d5200:	f000 fbc6 	bl	d5990 <_ZdlPvj>
        }
    }
   d5204:	b007      	add	sp, #28
   d5206:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5208:	000d4e4f 	.word	0x000d4e4f
   d520c:	000d511d 	.word	0x000d511d
   d5210:	000d4a35 	.word	0x000d4a35

000d5214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5214:	b530      	push	{r4, r5, lr}
   d5216:	b085      	sub	sp, #20
   d5218:	4604      	mov	r4, r0
   d521a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d521c:	4668      	mov	r0, sp
   d521e:	4611      	mov	r1, r2
   d5220:	f7ff fdb9 	bl	d4d96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5224:	b17c      	cbz	r4, d5246 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5226:	b224      	sxth	r4, r4
   d5228:	4628      	mov	r0, r5
   d522a:	b10d      	cbz	r5, d5230 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d522c:	f001 fe1a 	bl	d6e64 <strdup>
   d5230:	9002      	str	r0, [sp, #8]
   d5232:	a902      	add	r1, sp, #8
   d5234:	4668      	mov	r0, sp
   d5236:	f8ad 400c 	strh.w	r4, [sp, #12]
   d523a:	f7ff fe1f 	bl	d4e7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d523e:	a802      	add	r0, sp, #8
   d5240:	f7ff fd6e 	bl	d4d20 <_ZN8particle5ErrorD1Ev>
   d5244:	e01d      	b.n	d5282 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5246:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5248:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d524c:	f04f 0201 	mov.w	r2, #1
   d5250:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5254:	42a3      	cmp	r3, r4
   d5256:	d103      	bne.n	d5260 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5258:	e8c0 2f41 	strexb	r1, r2, [r0]
   d525c:	2900      	cmp	r1, #0
   d525e:	d1f7      	bne.n	d5250 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5260:	d002      	beq.n	d5268 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5262:	f88d 3008 	strb.w	r3, [sp, #8]
   d5266:	e00c      	b.n	d5282 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5268:	f110 010c 	adds.w	r1, r0, #12
   d526c:	f04f 0301 	mov.w	r3, #1
   d5270:	bf18      	it	ne
   d5272:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5274:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5278:	3004      	adds	r0, #4
   d527a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d527e:	f7ff ff71 	bl	d5164 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5282:	a801      	add	r0, sp, #4
   d5284:	f7fe ff20 	bl	d40c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5288:	b005      	add	sp, #20
   d528a:	bd30      	pop	{r4, r5, pc}

000d528c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d528c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d528e:	4b0c      	ldr	r3, [pc, #48]	; (d52c0 <serialEventRun+0x34>)
   d5290:	b133      	cbz	r3, d52a0 <serialEventRun+0x14>
   d5292:	f7ff fc8f 	bl	d4bb4 <_Z16_fetch_usbserialv>
   d5296:	6803      	ldr	r3, [r0, #0]
   d5298:	691b      	ldr	r3, [r3, #16]
   d529a:	4798      	blx	r3
   d529c:	2800      	cmp	r0, #0
   d529e:	dc09      	bgt.n	d52b4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d52a0:	4b08      	ldr	r3, [pc, #32]	; (d52c4 <serialEventRun+0x38>)
   d52a2:	b163      	cbz	r3, d52be <serialEventRun+0x32>
   d52a4:	f000 f958 	bl	d5558 <_Z22__fetch_global_Serial1v>
   d52a8:	6803      	ldr	r3, [r0, #0]
   d52aa:	691b      	ldr	r3, [r3, #16]
   d52ac:	4798      	blx	r3
   d52ae:	2800      	cmp	r0, #0
   d52b0:	dc03      	bgt.n	d52ba <serialEventRun+0x2e>
   d52b2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d52b4:	f3af 8000 	nop.w
   d52b8:	e7f2      	b.n	d52a0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d52ba:	f3af 8000 	nop.w
   d52be:	bd08      	pop	{r3, pc}
	...

000d52c8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d52c8:	b508      	push	{r3, lr}
	serialEventRun();
   d52ca:	f7ff ffdf 	bl	d528c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52ce:	f7ff f907 	bl	d44e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52d2:	4b01      	ldr	r3, [pc, #4]	; (d52d8 <_post_loop+0x10>)
   d52d4:	6018      	str	r0, [r3, #0]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	2003e72c 	.word	0x2003e72c

000d52dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d52dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52de:	2300      	movs	r3, #0
   d52e0:	9300      	str	r3, [sp, #0]
   d52e2:	461a      	mov	r2, r3
   d52e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52e8:	f7ff f9cc 	bl	d4684 <system_ctrl_set_result>
}
   d52ec:	b003      	add	sp, #12
   d52ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52f6:	8843      	ldrh	r3, [r0, #2]
   d52f8:	2b0a      	cmp	r3, #10
   d52fa:	d008      	beq.n	d530e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52fc:	2b50      	cmp	r3, #80	; 0x50
   d52fe:	d109      	bne.n	d5314 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5300:	4b09      	ldr	r3, [pc, #36]	; (d5328 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5302:	681b      	ldr	r3, [r3, #0]
   d5304:	b13b      	cbz	r3, d5316 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5306:	b003      	add	sp, #12
   d5308:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d530c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d530e:	f7ff ffe5 	bl	d52dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5312:	e006      	b.n	d5322 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5314:	2300      	movs	r3, #0
   d5316:	9300      	str	r3, [sp, #0]
   d5318:	461a      	mov	r2, r3
   d531a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d531e:	f7ff f9b1 	bl	d4684 <system_ctrl_set_result>
        break;
    }
}
   d5322:	b003      	add	sp, #12
   d5324:	f85d fb04 	ldr.w	pc, [sp], #4
   d5328:	2003e5c4 	.word	0x2003e5c4

000d532c <module_user_init_hook>:

void module_user_init_hook()
{
   d532c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d532e:	f7ff f8cf 	bl	d44d0 <HAL_RNG_GetRandomNumber>
   d5332:	4604      	mov	r4, r0
    srand(seed);
   d5334:	f001 fd6e 	bl	d6e14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5338:	4b07      	ldr	r3, [pc, #28]	; (d5358 <module_user_init_hook+0x2c>)
   d533a:	b113      	cbz	r3, d5342 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d533c:	4620      	mov	r0, r4
   d533e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5342:	2100      	movs	r1, #0
   d5344:	4804      	ldr	r0, [pc, #16]	; (d5358 <module_user_init_hook+0x2c>)
   d5346:	f7ff f91b 	bl	d4580 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d534a:	2100      	movs	r1, #0
   d534c:	4803      	ldr	r0, [pc, #12]	; (d535c <module_user_init_hook+0x30>)
}
   d534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5352:	f7ff b98d 	b.w	d4670 <system_ctrl_set_app_request_handler>
   d5356:	bf00      	nop
   d5358:	00000000 	.word	0x00000000
   d535c:	000d52f5 	.word	0x000d52f5

000d5360 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5360:	b510      	push	{r4, lr}
   d5362:	4604      	mov	r4, r0
   d5364:	f7ff f9c8 	bl	d46f8 <_ZNSt14_Function_baseD1Ev>
   d5368:	4620      	mov	r0, r4
   d536a:	bd10      	pop	{r4, pc}

000d536c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d536c:	4803      	ldr	r0, [pc, #12]	; (d537c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d536e:	4a04      	ldr	r2, [pc, #16]	; (d5380 <_GLOBAL__sub_I_RGB+0x14>)
   d5370:	4904      	ldr	r1, [pc, #16]	; (d5384 <_GLOBAL__sub_I_RGB+0x18>)
   d5372:	2300      	movs	r3, #0
   d5374:	6083      	str	r3, [r0, #8]
   d5376:	f000 bb06 	b.w	d5986 <__aeabi_atexit>
   d537a:	bf00      	nop
   d537c:	2003e5c8 	.word	0x2003e5c8
   d5380:	2003e3c0 	.word	0x2003e3c0
   d5384:	000d5361 	.word	0x000d5361

000d5388 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5388:	2100      	movs	r1, #0
   d538a:	f7ff b959 	b.w	d4640 <system_delay_ms>
	...

000d5390 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5390:	4b02      	ldr	r3, [pc, #8]	; (d539c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5396:	601a      	str	r2, [r3, #0]
   d5398:	4770      	bx	lr
   d539a:	bf00      	nop
   d539c:	2003e354 	.word	0x2003e354
   d53a0:	2003e5d8 	.word	0x2003e5d8

000d53a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d53a4:	4b01      	ldr	r3, [pc, #4]	; (d53ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d53a6:	4a02      	ldr	r2, [pc, #8]	; (d53b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d53a8:	601a      	str	r2, [r3, #0]
   d53aa:	4770      	bx	lr
   d53ac:	2003e5dc 	.word	0x2003e5dc
   d53b0:	000d70c8 	.word	0x000d70c8

000d53b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d53b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b6:	4606      	mov	r6, r0
   d53b8:	460d      	mov	r5, r1
   d53ba:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d53bc:	2400      	movs	r4, #0
  while (size--) {
   d53be:	42bd      	cmp	r5, r7
   d53c0:	d00c      	beq.n	d53dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d53c2:	6833      	ldr	r3, [r6, #0]
   d53c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d53c8:	689b      	ldr	r3, [r3, #8]
   d53ca:	4630      	mov	r0, r6
   d53cc:	4798      	blx	r3
     if (chunk>=0)
   d53ce:	2800      	cmp	r0, #0
   d53d0:	db01      	blt.n	d53d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d53d2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d53d4:	e7f3      	b.n	d53be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d53d6:	2c00      	cmp	r4, #0
   d53d8:	bf08      	it	eq
   d53da:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d53dc:	4620      	mov	r0, r4
   d53de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d53e0:	b570      	push	{r4, r5, r6, lr}
   d53e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d53e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d53e6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d53e8:	b149      	cbz	r1, d53fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d53ea:	f001 fd56 	bl	d6e9a <strlen>
   d53ee:	682b      	ldr	r3, [r5, #0]
   d53f0:	4602      	mov	r2, r0
   d53f2:	4621      	mov	r1, r4
   d53f4:	4628      	mov	r0, r5
   d53f6:	68db      	ldr	r3, [r3, #12]
    }
   d53f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d53fc:	4718      	bx	r3
    }
   d53fe:	bd70      	pop	{r4, r5, r6, pc}

000d5400 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5400:	6803      	ldr	r3, [r0, #0]
   d5402:	689b      	ldr	r3, [r3, #8]
   d5404:	4718      	bx	r3

000d5406 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5406:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5408:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d540a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d540c:	f7ff fff8 	bl	d5400 <_ZN5Print5printEc>
  n += print('\n');
   d5410:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5412:	4604      	mov	r4, r0
  n += print('\n');
   d5414:	4628      	mov	r0, r5
   d5416:	f7ff fff3 	bl	d5400 <_ZN5Print5printEc>
  return n;
}
   d541a:	4420      	add	r0, r4
   d541c:	bd38      	pop	{r3, r4, r5, pc}

000d541e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d541e:	b538      	push	{r3, r4, r5, lr}
   d5420:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5422:	f7ff ffdd 	bl	d53e0 <_ZN5Print5writeEPKc>
   d5426:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5428:	4628      	mov	r0, r5
   d542a:	f7ff ffec 	bl	d5406 <_ZN5Print7printlnEv>
  return n;
}
   d542e:	4420      	add	r0, r4
   d5430:	bd38      	pop	{r3, r4, r5, pc}

000d5432 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5432:	b530      	push	{r4, r5, lr}
   d5434:	b08b      	sub	sp, #44	; 0x2c
   d5436:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5438:	2100      	movs	r1, #0
   d543a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d543e:	2a01      	cmp	r2, #1
   d5440:	bf98      	it	ls
   d5442:	220a      	movls	r2, #10
   d5444:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5448:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d544c:	fb05 3312 	mls	r3, r5, r2, r3
   d5450:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5454:	2b09      	cmp	r3, #9
   d5456:	bf94      	ite	ls
   d5458:	3330      	addls	r3, #48	; 0x30
   d545a:	3337      	addhi	r3, #55	; 0x37
   d545c:	b2db      	uxtb	r3, r3
   d545e:	4621      	mov	r1, r4
   d5460:	f804 3901 	strb.w	r3, [r4], #-1
   d5464:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5466:	2d00      	cmp	r5, #0
   d5468:	d1ee      	bne.n	d5448 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d546a:	f7ff ffb9 	bl	d53e0 <_ZN5Print5writeEPKc>
}
   d546e:	b00b      	add	sp, #44	; 0x2c
   d5470:	bd30      	pop	{r4, r5, pc}

000d5472 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5472:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5474:	b92a      	cbnz	r2, d5482 <_ZN5Print5printEmi+0x10>
   d5476:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5478:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d547c:	689b      	ldr	r3, [r3, #8]
   d547e:	b2c9      	uxtb	r1, r1
   d5480:	4718      	bx	r3
  else return printNumber(n, base);
   d5482:	b2d2      	uxtb	r2, r2
}
   d5484:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5488:	f7ff bfd3 	b.w	d5432 <_ZN5Print11printNumberEmh>

000d548c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d548c:	f7ff bff1 	b.w	d5472 <_ZN5Print5printEmi>

000d5490 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5490:	4802      	ldr	r0, [pc, #8]	; (d549c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5492:	2300      	movs	r3, #0
   d5494:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5496:	f7ff b813 	b.w	d44c0 <os_mutex_recursive_create>
   d549a:	bf00      	nop
   d549c:	2003e5e0 	.word	0x2003e5e0

000d54a0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d54a0:	4770      	bx	lr

000d54a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54a2:	7441      	strb	r1, [r0, #17]
   d54a4:	4770      	bx	lr

000d54a6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d54a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d54a8:	7c00      	ldrb	r0, [r0, #16]
   d54aa:	f7fe ffd9 	bl	d4460 <HAL_USART_Available_Data_For_Write>
}
   d54ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54b2:	bd08      	pop	{r3, pc}

000d54b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d54b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d54b6:	7c00      	ldrb	r0, [r0, #16]
   d54b8:	f7fe ffaa 	bl	d4410 <HAL_USART_Available_Data>
}
   d54bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54c0:	bd08      	pop	{r3, pc}

000d54c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d54c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d54c4:	7c00      	ldrb	r0, [r0, #16]
   d54c6:	f7fe ffb3 	bl	d4430 <HAL_USART_Peek_Data>
}
   d54ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54ce:	bf28      	it	cs
   d54d0:	f04f 30ff 	movcs.w	r0, #4294967295
   d54d4:	bd08      	pop	{r3, pc}

000d54d6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d54d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d54d8:	7c00      	ldrb	r0, [r0, #16]
   d54da:	f7fe ffa1 	bl	d4420 <HAL_USART_Read_Data>
}
   d54de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54e2:	bf28      	it	cs
   d54e4:	f04f 30ff 	movcs.w	r0, #4294967295
   d54e8:	bd08      	pop	{r3, pc}

000d54ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d54ea:	7c00      	ldrb	r0, [r0, #16]
   d54ec:	f7fe bfa8 	b.w	d4440 <HAL_USART_Flush_Data>

000d54f0 <_ZN11USARTSerialD0Ev>:
   d54f0:	b510      	push	{r4, lr}
   d54f2:	2114      	movs	r1, #20
   d54f4:	4604      	mov	r4, r0
   d54f6:	f000 fa4b 	bl	d5990 <_ZdlPvj>
   d54fa:	4620      	mov	r0, r4
   d54fc:	bd10      	pop	{r4, pc}

000d54fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d54fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5500:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5502:	4604      	mov	r4, r0
   d5504:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5506:	b925      	cbnz	r5, d5512 <_ZN11USARTSerial5writeEh+0x14>
   d5508:	7c00      	ldrb	r0, [r0, #16]
   d550a:	f7fe ffa9 	bl	d4460 <HAL_USART_Available_Data_For_Write>
   d550e:	2800      	cmp	r0, #0
   d5510:	dd05      	ble.n	d551e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5512:	4631      	mov	r1, r6
   d5514:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d551a:	f7fe bf71 	b.w	d4400 <HAL_USART_Write_Data>
  }
  return 0;
}
   d551e:	4628      	mov	r0, r5
   d5520:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5524 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5524:	b510      	push	{r4, lr}
   d5526:	4604      	mov	r4, r0
   d5528:	4608      	mov	r0, r1
   d552a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d552c:	2200      	movs	r2, #0
   d552e:	6062      	str	r2, [r4, #4]
   d5530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5534:	60a2      	str	r2, [r4, #8]
   d5536:	4a05      	ldr	r2, [pc, #20]	; (d554c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5538:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d553a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d553c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d553e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5540:	461a      	mov	r2, r3
   d5542:	f7fe ff55 	bl	d43f0 <HAL_USART_Init>
}
   d5546:	4620      	mov	r0, r4
   d5548:	bd10      	pop	{r4, pc}
   d554a:	bf00      	nop
   d554c:	000d7140 	.word	0x000d7140

000d5550 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5550:	7c00      	ldrb	r0, [r0, #16]
   d5552:	f7fe bf7d 	b.w	d4450 <HAL_USART_Is_Enabled>
	...

000d5558 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5558:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d555a:	4d0c      	ldr	r5, [pc, #48]	; (d558c <_Z22__fetch_global_Serial1v+0x34>)
   d555c:	6829      	ldr	r1, [r5, #0]
   d555e:	f011 0401 	ands.w	r4, r1, #1
   d5562:	d111      	bne.n	d5588 <_Z22__fetch_global_Serial1v+0x30>
   d5564:	4628      	mov	r0, r5
   d5566:	f7fe fd9e 	bl	d40a6 <__cxa_guard_acquire>
   d556a:	b168      	cbz	r0, d5588 <_Z22__fetch_global_Serial1v+0x30>
   d556c:	4a08      	ldr	r2, [pc, #32]	; (d5590 <_Z22__fetch_global_Serial1v+0x38>)
   d556e:	4b09      	ldr	r3, [pc, #36]	; (d5594 <_Z22__fetch_global_Serial1v+0x3c>)
   d5570:	4809      	ldr	r0, [pc, #36]	; (d5598 <_Z22__fetch_global_Serial1v+0x40>)
   d5572:	4621      	mov	r1, r4
   d5574:	f7ff ffd6 	bl	d5524 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5578:	4628      	mov	r0, r5
   d557a:	f7fe fd99 	bl	d40b0 <__cxa_guard_release>
   d557e:	4a07      	ldr	r2, [pc, #28]	; (d559c <_Z22__fetch_global_Serial1v+0x44>)
   d5580:	4907      	ldr	r1, [pc, #28]	; (d55a0 <_Z22__fetch_global_Serial1v+0x48>)
   d5582:	4805      	ldr	r0, [pc, #20]	; (d5598 <_Z22__fetch_global_Serial1v+0x40>)
   d5584:	f000 f9ff 	bl	d5986 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5588:	4803      	ldr	r0, [pc, #12]	; (d5598 <_Z22__fetch_global_Serial1v+0x40>)
   d558a:	bd38      	pop	{r3, r4, r5, pc}
   d558c:	2003e67c 	.word	0x2003e67c
   d5590:	2003e680 	.word	0x2003e680
   d5594:	2003e5f8 	.word	0x2003e5f8
   d5598:	2003e5e4 	.word	0x2003e5e4
   d559c:	2003e3c0 	.word	0x2003e3c0
   d55a0:	000d54a1 	.word	0x000d54a1

000d55a4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d55a4:	b510      	push	{r4, lr}
   d55a6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d55a8:	f001 fc77 	bl	d6e9a <strlen>
   d55ac:	3801      	subs	r0, #1
   d55ae:	1823      	adds	r3, r4, r0
   d55b0:	4620      	mov	r0, r4
	while(i<j){
   d55b2:	4298      	cmp	r0, r3
   d55b4:	d206      	bcs.n	d55c4 <_Z11str_reversePc+0x20>
		c = *i;
   d55b6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d55b8:	7819      	ldrb	r1, [r3, #0]
   d55ba:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d55be:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d55c2:	e7f6      	b.n	d55b2 <_Z11str_reversePc+0xe>
   d55c4:	bd10      	pop	{r4, pc}

000d55c6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d55c6:	b570      	push	{r4, r5, r6, lr}
   d55c8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d55ca:	1e91      	subs	r1, r2, #2
   d55cc:	2922      	cmp	r1, #34	; 0x22
   d55ce:	d820      	bhi.n	d5612 <ultoa+0x4c>
   d55d0:	4625      	mov	r5, r4
   d55d2:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d55d4:	b910      	cbnz	r0, d55dc <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d55d6:	4423      	add	r3, r4
            *ptr++ = '0';
   d55d8:	2230      	movs	r2, #48	; 0x30
   d55da:	e00e      	b.n	d55fa <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d55dc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d55e0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d55e4:	b2c1      	uxtb	r1, r0
   d55e6:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d55ea:	2809      	cmp	r0, #9
                *ptr += '0';
   d55ec:	bf94      	ite	ls
   d55ee:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d55f0:	3157      	addhi	r1, #87	; 0x57
   d55f2:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d55f6:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d55f8:	e7eb      	b.n	d55d2 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d55fa:	4299      	cmp	r1, r3
   d55fc:	d202      	bcs.n	d5604 <ultoa+0x3e>
            *ptr++ = '0';
   d55fe:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5602:	e7fa      	b.n	d55fa <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5604:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5606:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d5608:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d560a:	f7ff ffcb 	bl	d55a4 <_Z11str_reversePc>
	return buffer;
   d560e:	4620      	mov	r0, r4
   d5610:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5612:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5614:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5618 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5618:	4b04      	ldr	r3, [pc, #16]	; (d562c <_GLOBAL__sub_I_System+0x14>)
   d561a:	2000      	movs	r0, #0
   d561c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5620:	7018      	strb	r0, [r3, #0]
   d5622:	8058      	strh	r0, [r3, #2]
   d5624:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5626:	f7ff b803 	b.w	d4630 <set_system_mode>
   d562a:	bf00      	nop
   d562c:	2003e704 	.word	0x2003e704

000d5630 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5630:	4770      	bx	lr

000d5632 <_ZN8SPIClassD0Ev>:
   d5632:	b510      	push	{r4, lr}
   d5634:	2110      	movs	r1, #16
   d5636:	4604      	mov	r4, r0
   d5638:	f000 f9aa 	bl	d5990 <_ZdlPvj>
   d563c:	4620      	mov	r0, r4
   d563e:	bd10      	pop	{r4, pc}

000d5640 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5640:	b570      	push	{r4, r5, r6, lr}
   d5642:	4b08      	ldr	r3, [pc, #32]	; (d5664 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5644:	6003      	str	r3, [r0, #0]
   d5646:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5648:	2500      	movs	r5, #0
   d564a:	460e      	mov	r6, r1
   d564c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5650:	f7fe ff2e 	bl	d44b0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5654:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5656:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5658:	f7fe ff4a 	bl	d44f0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d565c:	60a5      	str	r5, [r4, #8]
}
   d565e:	4620      	mov	r0, r4
   d5660:	bd70      	pop	{r4, r5, r6, pc}
   d5662:	bf00      	nop
   d5664:	000d7170 	.word	0x000d7170

000d5668 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5668:	7900      	ldrb	r0, [r0, #4]
   d566a:	f7fe bf49 	b.w	d4500 <HAL_SPI_Is_Enabled>

000d566e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d566e:	2200      	movs	r2, #0
   d5670:	4611      	mov	r1, r2
   d5672:	6840      	ldr	r0, [r0, #4]
   d5674:	f7fe bfc4 	b.w	d4600 <network_listening>

000d5678 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5678:	2200      	movs	r2, #0
   d567a:	4611      	mov	r1, r2
   d567c:	6840      	ldr	r0, [r0, #4]
   d567e:	f7fe bfcf 	b.w	d4620 <network_get_listen_timeout>

000d5682 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5682:	2200      	movs	r2, #0
   d5684:	6840      	ldr	r0, [r0, #4]
   d5686:	f7fe bfc3 	b.w	d4610 <network_set_listen_timeout>

000d568a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d568a:	2200      	movs	r2, #0
   d568c:	f081 0101 	eor.w	r1, r1, #1
   d5690:	6840      	ldr	r0, [r0, #4]
   d5692:	f7fe bfad 	b.w	d45f0 <network_listen>

000d5696 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5696:	2300      	movs	r3, #0
   d5698:	461a      	mov	r2, r3
   d569a:	4619      	mov	r1, r3
   d569c:	6840      	ldr	r0, [r0, #4]
   d569e:	f7fe bf9f 	b.w	d45e0 <network_off>

000d56a2 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56a2:	2300      	movs	r3, #0
   d56a4:	461a      	mov	r2, r3
   d56a6:	4619      	mov	r1, r3
   d56a8:	6840      	ldr	r0, [r0, #4]
   d56aa:	f7fe bf91 	b.w	d45d0 <network_on>

000d56ae <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56ae:	2200      	movs	r2, #0
   d56b0:	4611      	mov	r1, r2
   d56b2:	6840      	ldr	r0, [r0, #4]
   d56b4:	f7fe bf84 	b.w	d45c0 <network_ready>

000d56b8 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56b8:	2200      	movs	r2, #0
   d56ba:	4611      	mov	r1, r2
   d56bc:	6840      	ldr	r0, [r0, #4]
   d56be:	f7fe bf6f 	b.w	d45a0 <network_connecting>

000d56c2 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56c2:	2200      	movs	r2, #0
   d56c4:	2102      	movs	r1, #2
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	f7fe bf72 	b.w	d45b0 <network_disconnect>

000d56cc <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56cc:	2300      	movs	r3, #0
   d56ce:	461a      	mov	r2, r3
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7fe bf5d 	b.w	d4590 <network_connect>
	...

000d56d8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d56d8:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d56da:	2203      	movs	r2, #3
   d56dc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d56de:	4a02      	ldr	r2, [pc, #8]	; (d56e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d56e0:	601a      	str	r2, [r3, #0]
   d56e2:	4770      	bx	lr
   d56e4:	2003e70c 	.word	0x2003e70c
   d56e8:	000d7180 	.word	0x000d7180

000d56ec <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d56ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56f0:	ec59 8b10 	vmov	r8, r9, d0
   d56f4:	4607      	mov	r7, r0
   d56f6:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d56f8:	2200      	movs	r2, #0
   d56fa:	2300      	movs	r3, #0
   d56fc:	ee10 0a10 	vmov	r0, s0
   d5700:	4649      	mov	r1, r9
   d5702:	f001 f957 	bl	d69b4 <__aeabi_dcmplt>
   d5706:	b128      	cbz	r0, d5714 <_Z4dtoadhPc+0x28>
        val = -val;
   d5708:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d570c:	4699      	mov	r9, r3
        *sout++ = '-';
   d570e:	232d      	movs	r3, #45	; 0x2d
   d5710:	7033      	strb	r3, [r6, #0]
   d5712:	3601      	adds	r6, #1
   d5714:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5716:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5718:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d571a:	b2d9      	uxtb	r1, r3
   d571c:	428f      	cmp	r7, r1
   d571e:	d902      	bls.n	d5726 <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d5720:	4354      	muls	r4, r2
   d5722:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d5724:	e7f9      	b.n	d571a <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d5726:	4620      	mov	r0, r4
   d5728:	f000 fe6c 	bl	d6404 <__aeabi_i2d>
   d572c:	4642      	mov	r2, r8
   d572e:	464b      	mov	r3, r9
   d5730:	f000 fece 	bl	d64d0 <__aeabi_dmul>
   d5734:	4682      	mov	sl, r0
   d5736:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d5738:	f001 f9b2 	bl	d6aa0 <__aeabi_d2ulz>
   d573c:	4680      	mov	r8, r0
   d573e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5740:	f000 fe90 	bl	d6464 <__aeabi_ul2d>
   d5744:	4602      	mov	r2, r0
   d5746:	460b      	mov	r3, r1
   d5748:	4650      	mov	r0, sl
   d574a:	4659      	mov	r1, fp
   d574c:	f000 fd0c 	bl	d6168 <__aeabi_dsub>
   d5750:	2200      	movs	r2, #0
   d5752:	4b17      	ldr	r3, [pc, #92]	; (d57b0 <_Z4dtoadhPc+0xc4>)
   d5754:	f001 f942 	bl	d69dc <__aeabi_dcmpge>
   d5758:	b118      	cbz	r0, d5762 <_Z4dtoadhPc+0x76>
        fixed++;
   d575a:	f118 0801 	adds.w	r8, r8, #1
   d575e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5762:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d5764:	4622      	mov	r2, r4
   d5766:	462b      	mov	r3, r5
   d5768:	4640      	mov	r0, r8
   d576a:	4649      	mov	r1, r9
   d576c:	f001 f980 	bl	d6a70 <__aeabi_uldivmod>
   d5770:	2301      	movs	r3, #1
   d5772:	220a      	movs	r2, #10
   d5774:	4631      	mov	r1, r6
   d5776:	f7ff ff26 	bl	d55c6 <ultoa>
    if (prec) {
   d577a:	b1af      	cbz	r7, d57a8 <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d577c:	4630      	mov	r0, r6
   d577e:	f001 fb8c 	bl	d6e9a <strlen>
        *sout++ = '.';
   d5782:	232e      	movs	r3, #46	; 0x2e
   d5784:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d5786:	3001      	adds	r0, #1
   d5788:	4406      	add	r6, r0
   d578a:	4622      	mov	r2, r4
   d578c:	462b      	mov	r3, r5
   d578e:	4640      	mov	r0, r8
   d5790:	4649      	mov	r1, r9
   d5792:	f001 f96d 	bl	d6a70 <__aeabi_uldivmod>
   d5796:	463b      	mov	r3, r7
   d5798:	4610      	mov	r0, r2
   d579a:	4631      	mov	r1, r6
   d579c:	220a      	movs	r2, #10
    }
}
   d579e:	b001      	add	sp, #4
   d57a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d57a4:	f7ff bf0f 	b.w	d55c6 <ultoa>
    }
}
   d57a8:	b001      	add	sp, #4
   d57aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57ae:	bf00      	nop
   d57b0:	3fe00000 	.word	0x3fe00000

000d57b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d57b4:	b510      	push	{r4, lr}
   d57b6:	4604      	mov	r4, r0
{
	free(buffer);
   d57b8:	6800      	ldr	r0, [r0, #0]
   d57ba:	f7fe ff75 	bl	d46a8 <free>
}
   d57be:	4620      	mov	r0, r4
   d57c0:	bd10      	pop	{r4, pc}

000d57c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d57c2:	b510      	push	{r4, lr}
   d57c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d57c6:	6800      	ldr	r0, [r0, #0]
   d57c8:	b108      	cbz	r0, d57ce <_ZN6String10invalidateEv+0xc>
   d57ca:	f7fe ff6d 	bl	d46a8 <free>
	buffer = NULL;
   d57ce:	2300      	movs	r3, #0
   d57d0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d57d2:	60a3      	str	r3, [r4, #8]
   d57d4:	6063      	str	r3, [r4, #4]
   d57d6:	bd10      	pop	{r4, pc}

000d57d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d57d8:	b538      	push	{r3, r4, r5, lr}
   d57da:	4604      	mov	r4, r0
   d57dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d57de:	6800      	ldr	r0, [r0, #0]
   d57e0:	3101      	adds	r1, #1
   d57e2:	f7fe ff69 	bl	d46b8 <realloc>
	if (newbuffer) {
   d57e6:	b110      	cbz	r0, d57ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d57e8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d57ec:	2001      	movs	r0, #1
	}
	return 0;
}
   d57ee:	bd38      	pop	{r3, r4, r5, pc}

000d57f0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d57f2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d57f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d57f6:	b113      	cbz	r3, d57fe <_ZN6String7reserveEj+0xe>
   d57f8:	6843      	ldr	r3, [r0, #4]
   d57fa:	428b      	cmp	r3, r1
   d57fc:	d207      	bcs.n	d580e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d57fe:	4620      	mov	r0, r4
   d5800:	f7ff ffea 	bl	d57d8 <_ZN6String12changeBufferEj>
   d5804:	b120      	cbz	r0, d5810 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5806:	68a3      	ldr	r3, [r4, #8]
   d5808:	b90b      	cbnz	r3, d580e <_ZN6String7reserveEj+0x1e>
   d580a:	6822      	ldr	r2, [r4, #0]
   d580c:	7013      	strb	r3, [r2, #0]
   d580e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5810:	bd10      	pop	{r4, pc}

000d5812 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5812:	b570      	push	{r4, r5, r6, lr}
   d5814:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5816:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5818:	4604      	mov	r4, r0
   d581a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d581c:	f7ff ffe8 	bl	d57f0 <_ZN6String7reserveEj>
   d5820:	b918      	cbnz	r0, d582a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5822:	4620      	mov	r0, r4
   d5824:	f7ff ffcd 	bl	d57c2 <_ZN6String10invalidateEv>
		return *this;
   d5828:	e009      	b.n	d583e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d582a:	462a      	mov	r2, r5
   d582c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d582e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5830:	6820      	ldr	r0, [r4, #0]
   d5832:	f001 fadb 	bl	d6dec <memcpy>
	buffer[len] = 0;
   d5836:	6822      	ldr	r2, [r4, #0]
   d5838:	68a3      	ldr	r3, [r4, #8]
   d583a:	2100      	movs	r1, #0
   d583c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d583e:	4620      	mov	r0, r4
   d5840:	bd70      	pop	{r4, r5, r6, pc}

000d5842 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5842:	b538      	push	{r3, r4, r5, lr}
   d5844:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5846:	460c      	mov	r4, r1
   d5848:	b141      	cbz	r1, d585c <_ZN6StringaSEPKc+0x1a>
   d584a:	4608      	mov	r0, r1
   d584c:	f001 fb25 	bl	d6e9a <strlen>
   d5850:	4621      	mov	r1, r4
   d5852:	4602      	mov	r2, r0
   d5854:	4628      	mov	r0, r5
   d5856:	f7ff ffdc 	bl	d5812 <_ZN6String4copyEPKcj>
   d585a:	e001      	b.n	d5860 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d585c:	f7ff ffb1 	bl	d57c2 <_ZN6String10invalidateEv>

	return *this;
}
   d5860:	4628      	mov	r0, r5
   d5862:	bd38      	pop	{r3, r4, r5, pc}

000d5864 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5864:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5866:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
   d5868:	b08a      	sub	sp, #40	; 0x28
   d586a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d586c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d586e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5870:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5872:	7303      	strb	r3, [r0, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d5874:	b2c8      	uxtb	r0, r1
   d5876:	a901      	add	r1, sp, #4
   d5878:	f7ff ff38 	bl	d56ec <_Z4dtoadhPc>
        *this = buf;
   d587c:	a901      	add	r1, sp, #4
   d587e:	4620      	mov	r0, r4
   d5880:	f7ff ffdf 	bl	d5842 <_ZN6StringaSEPKc>
}
   d5884:	4620      	mov	r0, r4
   d5886:	b00a      	add	sp, #40	; 0x28
   d5888:	bd10      	pop	{r4, pc}
	...

000d588c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d588c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d588e:	4d0b      	ldr	r5, [pc, #44]	; (d58bc <_Z19__fetch_global_Wirev+0x30>)
   d5890:	6829      	ldr	r1, [r5, #0]
   d5892:	f011 0401 	ands.w	r4, r1, #1
   d5896:	d10f      	bne.n	d58b8 <_Z19__fetch_global_Wirev+0x2c>
   d5898:	4628      	mov	r0, r5
   d589a:	f7fe fc04 	bl	d40a6 <__cxa_guard_acquire>
   d589e:	b158      	cbz	r0, d58b8 <_Z19__fetch_global_Wirev+0x2c>
   d58a0:	4621      	mov	r1, r4
   d58a2:	4807      	ldr	r0, [pc, #28]	; (d58c0 <_Z19__fetch_global_Wirev+0x34>)
   d58a4:	f7ff f906 	bl	d4ab4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d58a8:	4628      	mov	r0, r5
   d58aa:	f7fe fc01 	bl	d40b0 <__cxa_guard_release>
   d58ae:	4a05      	ldr	r2, [pc, #20]	; (d58c4 <_Z19__fetch_global_Wirev+0x38>)
   d58b0:	4905      	ldr	r1, [pc, #20]	; (d58c8 <_Z19__fetch_global_Wirev+0x3c>)
   d58b2:	4803      	ldr	r0, [pc, #12]	; (d58c0 <_Z19__fetch_global_Wirev+0x34>)
   d58b4:	f000 f867 	bl	d5986 <__aeabi_atexit>
	return wire;
}
   d58b8:	4801      	ldr	r0, [pc, #4]	; (d58c0 <_Z19__fetch_global_Wirev+0x34>)
   d58ba:	bd38      	pop	{r3, r4, r5, pc}
   d58bc:	2003e714 	.word	0x2003e714
   d58c0:	2003e718 	.word	0x2003e718
   d58c4:	2003e3c0 	.word	0x2003e3c0
   d58c8:	000d4a5d 	.word	0x000d4a5d

000d58cc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58cc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d58ce:	4c0c      	ldr	r4, [pc, #48]	; (d5900 <_GLOBAL__sub_I_SPI+0x34>)
   d58d0:	4e0c      	ldr	r6, [pc, #48]	; (d5904 <_GLOBAL__sub_I_SPI+0x38>)
   d58d2:	4d0d      	ldr	r5, [pc, #52]	; (d5908 <_GLOBAL__sub_I_SPI+0x3c>)
   d58d4:	2100      	movs	r1, #0
   d58d6:	4620      	mov	r0, r4
   d58d8:	f7ff feb2 	bl	d5640 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d58dc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58de:	4c0b      	ldr	r4, [pc, #44]	; (d590c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d58e0:	4632      	mov	r2, r6
   d58e2:	4629      	mov	r1, r5
   d58e4:	f000 f84f 	bl	d5986 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d58e8:	2101      	movs	r1, #1
   d58ea:	4620      	mov	r0, r4
   d58ec:	f7ff fea8 	bl	d5640 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d58f0:	4632      	mov	r2, r6
   d58f2:	4629      	mov	r1, r5
   d58f4:	4620      	mov	r0, r4
   d58f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d58fa:	f000 b844 	b.w	d5986 <__aeabi_atexit>
   d58fe:	bf00      	nop
   d5900:	2003e730 	.word	0x2003e730
   d5904:	2003e3c0 	.word	0x2003e3c0
   d5908:	000d5631 	.word	0x000d5631
   d590c:	2003e740 	.word	0x2003e740

000d5910 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5910:	b510      	push	{r4, lr}
   d5912:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5914:	480f      	ldr	r0, [pc, #60]	; (d5954 <pinAvailable+0x44>)
   d5916:	f7ff fea7 	bl	d5668 <_ZN8SPIClass9isEnabledEv>
   d591a:	b128      	cbz	r0, d5928 <pinAvailable+0x18>
   d591c:	f1a4 030b 	sub.w	r3, r4, #11
   d5920:	2b02      	cmp	r3, #2
   d5922:	d801      	bhi.n	d5928 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5924:	2000      	movs	r0, #0
   d5926:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5928:	f7ff ffb0 	bl	d588c <_Z19__fetch_global_Wirev>
   d592c:	f7ff f8d4 	bl	d4ad8 <_ZN7TwoWire9isEnabledEv>
   d5930:	b108      	cbz	r0, d5936 <pinAvailable+0x26>
   d5932:	2c01      	cmp	r4, #1
   d5934:	d9f6      	bls.n	d5924 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5936:	f7ff fe0f 	bl	d5558 <_Z22__fetch_global_Serial1v>
   d593a:	f7ff fe09 	bl	d5550 <_ZN11USARTSerial9isEnabledEv>
   d593e:	b118      	cbz	r0, d5948 <pinAvailable+0x38>
   d5940:	f1a4 0309 	sub.w	r3, r4, #9
   d5944:	2b01      	cmp	r3, #1
   d5946:	d9ed      	bls.n	d5924 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5948:	2c23      	cmp	r4, #35	; 0x23
   d594a:	bf8c      	ite	hi
   d594c:	2000      	movhi	r0, #0
   d594e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5950:	bd10      	pop	{r4, pc}
   d5952:	bf00      	nop
   d5954:	2003e730 	.word	0x2003e730

000d5958 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5958:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d595a:	b510      	push	{r4, lr}
   d595c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d595e:	bf9c      	itt	ls
   d5960:	340e      	addls	r4, #14
   d5962:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5964:	4620      	mov	r0, r4
   d5966:	f7ff ffd3 	bl	d5910 <pinAvailable>
   d596a:	b150      	cbz	r0, d5982 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d596c:	2103      	movs	r1, #3
   d596e:	4620      	mov	r0, r4
   d5970:	f7fe fdd6 	bl	d4520 <HAL_Validate_Pin_Function>
   d5974:	2803      	cmp	r0, #3
   d5976:	d104      	bne.n	d5982 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5978:	4620      	mov	r0, r4
}
   d597a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d597e:	f7fe bdd7 	b.w	d4530 <HAL_ADC_Read>
}
   d5982:	2000      	movs	r0, #0
   d5984:	bd10      	pop	{r4, pc}

000d5986 <__aeabi_atexit>:
   d5986:	460b      	mov	r3, r1
   d5988:	4601      	mov	r1, r0
   d598a:	4618      	mov	r0, r3
   d598c:	f001 ba20 	b.w	d6dd0 <__cxa_atexit>

000d5990 <_ZdlPvj>:
   d5990:	f7fe bb85 	b.w	d409e <_ZdlPv>

000d5994 <_ZSt25__throw_bad_function_callv>:
   d5994:	b508      	push	{r3, lr}
   d5996:	f7fe fe97 	bl	d46c8 <abort>
	...

000d599c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d599c:	4b18      	ldr	r3, [pc, #96]	; (d5a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d599e:	681a      	ldr	r2, [r3, #0]
   d59a0:	07d1      	lsls	r1, r2, #31
   d59a2:	bf5c      	itt	pl
   d59a4:	2201      	movpl	r2, #1
   d59a6:	601a      	strpl	r2, [r3, #0]
   d59a8:	4b16      	ldr	r3, [pc, #88]	; (d5a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d59aa:	681a      	ldr	r2, [r3, #0]
   d59ac:	07d2      	lsls	r2, r2, #31
   d59ae:	bf5c      	itt	pl
   d59b0:	2201      	movpl	r2, #1
   d59b2:	601a      	strpl	r2, [r3, #0]
   d59b4:	4b14      	ldr	r3, [pc, #80]	; (d5a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d59b6:	681a      	ldr	r2, [r3, #0]
   d59b8:	07d0      	lsls	r0, r2, #31
   d59ba:	bf5c      	itt	pl
   d59bc:	2201      	movpl	r2, #1
   d59be:	601a      	strpl	r2, [r3, #0]
   d59c0:	4b12      	ldr	r3, [pc, #72]	; (d5a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d59c2:	681a      	ldr	r2, [r3, #0]
   d59c4:	07d1      	lsls	r1, r2, #31
   d59c6:	bf5c      	itt	pl
   d59c8:	2201      	movpl	r2, #1
   d59ca:	601a      	strpl	r2, [r3, #0]
   d59cc:	4b10      	ldr	r3, [pc, #64]	; (d5a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d59ce:	681a      	ldr	r2, [r3, #0]
   d59d0:	07d2      	lsls	r2, r2, #31
   d59d2:	bf5c      	itt	pl
   d59d4:	2201      	movpl	r2, #1
   d59d6:	601a      	strpl	r2, [r3, #0]
   d59d8:	4b0e      	ldr	r3, [pc, #56]	; (d5a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d59da:	681a      	ldr	r2, [r3, #0]
   d59dc:	07d0      	lsls	r0, r2, #31
   d59de:	bf5c      	itt	pl
   d59e0:	2201      	movpl	r2, #1
   d59e2:	601a      	strpl	r2, [r3, #0]
   d59e4:	4b0c      	ldr	r3, [pc, #48]	; (d5a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d59e6:	681a      	ldr	r2, [r3, #0]
   d59e8:	07d1      	lsls	r1, r2, #31
   d59ea:	bf5c      	itt	pl
   d59ec:	2201      	movpl	r2, #1
   d59ee:	601a      	strpl	r2, [r3, #0]
   d59f0:	4b0a      	ldr	r3, [pc, #40]	; (d5a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d59f2:	681a      	ldr	r2, [r3, #0]
   d59f4:	07d2      	lsls	r2, r2, #31
   d59f6:	bf5c      	itt	pl
   d59f8:	2201      	movpl	r2, #1
   d59fa:	601a      	strpl	r2, [r3, #0]
   d59fc:	4770      	bx	lr
   d59fe:	bf00      	nop
   d5a00:	2003e76c 	.word	0x2003e76c
   d5a04:	2003e768 	.word	0x2003e768
   d5a08:	2003e764 	.word	0x2003e764
   d5a0c:	2003e760 	.word	0x2003e760
   d5a10:	2003e75c 	.word	0x2003e75c
   d5a14:	2003e758 	.word	0x2003e758
   d5a18:	2003e754 	.word	0x2003e754
   d5a1c:	2003e750 	.word	0x2003e750

000d5a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5a20:	4b24      	ldr	r3, [pc, #144]	; (d5ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5a22:	681a      	ldr	r2, [r3, #0]
   d5a24:	07d0      	lsls	r0, r2, #31
   d5a26:	bf5c      	itt	pl
   d5a28:	2201      	movpl	r2, #1
   d5a2a:	601a      	strpl	r2, [r3, #0]
   d5a2c:	4b22      	ldr	r3, [pc, #136]	; (d5ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5a2e:	681a      	ldr	r2, [r3, #0]
   d5a30:	07d1      	lsls	r1, r2, #31
   d5a32:	bf5c      	itt	pl
   d5a34:	2201      	movpl	r2, #1
   d5a36:	601a      	strpl	r2, [r3, #0]
   d5a38:	4b20      	ldr	r3, [pc, #128]	; (d5abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5a3a:	681a      	ldr	r2, [r3, #0]
   d5a3c:	07d2      	lsls	r2, r2, #31
   d5a3e:	bf5c      	itt	pl
   d5a40:	2201      	movpl	r2, #1
   d5a42:	601a      	strpl	r2, [r3, #0]
   d5a44:	4b1e      	ldr	r3, [pc, #120]	; (d5ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5a46:	681a      	ldr	r2, [r3, #0]
   d5a48:	07d0      	lsls	r0, r2, #31
   d5a4a:	bf5c      	itt	pl
   d5a4c:	2201      	movpl	r2, #1
   d5a4e:	601a      	strpl	r2, [r3, #0]
   d5a50:	4b1c      	ldr	r3, [pc, #112]	; (d5ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5a52:	681a      	ldr	r2, [r3, #0]
   d5a54:	07d1      	lsls	r1, r2, #31
   d5a56:	bf5c      	itt	pl
   d5a58:	2201      	movpl	r2, #1
   d5a5a:	601a      	strpl	r2, [r3, #0]
   d5a5c:	4b1a      	ldr	r3, [pc, #104]	; (d5ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5a5e:	681a      	ldr	r2, [r3, #0]
   d5a60:	07d2      	lsls	r2, r2, #31
   d5a62:	bf5c      	itt	pl
   d5a64:	2201      	movpl	r2, #1
   d5a66:	601a      	strpl	r2, [r3, #0]
   d5a68:	4b18      	ldr	r3, [pc, #96]	; (d5acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	07d0      	lsls	r0, r2, #31
   d5a6e:	bf5c      	itt	pl
   d5a70:	2201      	movpl	r2, #1
   d5a72:	601a      	strpl	r2, [r3, #0]
   d5a74:	4b16      	ldr	r3, [pc, #88]	; (d5ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	07d1      	lsls	r1, r2, #31
   d5a7a:	bf5c      	itt	pl
   d5a7c:	2201      	movpl	r2, #1
   d5a7e:	601a      	strpl	r2, [r3, #0]
   d5a80:	4b14      	ldr	r3, [pc, #80]	; (d5ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5a82:	681a      	ldr	r2, [r3, #0]
   d5a84:	07d2      	lsls	r2, r2, #31
   d5a86:	bf5c      	itt	pl
   d5a88:	2201      	movpl	r2, #1
   d5a8a:	601a      	strpl	r2, [r3, #0]
   d5a8c:	4b12      	ldr	r3, [pc, #72]	; (d5ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5a8e:	681a      	ldr	r2, [r3, #0]
   d5a90:	07d0      	lsls	r0, r2, #31
   d5a92:	bf5c      	itt	pl
   d5a94:	2201      	movpl	r2, #1
   d5a96:	601a      	strpl	r2, [r3, #0]
   d5a98:	4b10      	ldr	r3, [pc, #64]	; (d5adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5a9a:	681a      	ldr	r2, [r3, #0]
   d5a9c:	07d1      	lsls	r1, r2, #31
   d5a9e:	bf5c      	itt	pl
   d5aa0:	2201      	movpl	r2, #1
   d5aa2:	601a      	strpl	r2, [r3, #0]
   d5aa4:	4b0e      	ldr	r3, [pc, #56]	; (d5ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5aa6:	681a      	ldr	r2, [r3, #0]
   d5aa8:	07d2      	lsls	r2, r2, #31
   d5aaa:	bf5c      	itt	pl
   d5aac:	2201      	movpl	r2, #1
   d5aae:	601a      	strpl	r2, [r3, #0]
   d5ab0:	4770      	bx	lr
   d5ab2:	bf00      	nop
   d5ab4:	2003e79c 	.word	0x2003e79c
   d5ab8:	2003e798 	.word	0x2003e798
   d5abc:	2003e794 	.word	0x2003e794
   d5ac0:	2003e790 	.word	0x2003e790
   d5ac4:	2003e78c 	.word	0x2003e78c
   d5ac8:	2003e788 	.word	0x2003e788
   d5acc:	2003e784 	.word	0x2003e784
   d5ad0:	2003e780 	.word	0x2003e780
   d5ad4:	2003e77c 	.word	0x2003e77c
   d5ad8:	2003e778 	.word	0x2003e778
   d5adc:	2003e774 	.word	0x2003e774
   d5ae0:	2003e770 	.word	0x2003e770

000d5ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5ae4:	4b24      	ldr	r3, [pc, #144]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5ae6:	681a      	ldr	r2, [r3, #0]
   d5ae8:	07d0      	lsls	r0, r2, #31
   d5aea:	bf5c      	itt	pl
   d5aec:	2201      	movpl	r2, #1
   d5aee:	601a      	strpl	r2, [r3, #0]
   d5af0:	4b22      	ldr	r3, [pc, #136]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5af2:	681a      	ldr	r2, [r3, #0]
   d5af4:	07d1      	lsls	r1, r2, #31
   d5af6:	bf5c      	itt	pl
   d5af8:	2201      	movpl	r2, #1
   d5afa:	601a      	strpl	r2, [r3, #0]
   d5afc:	4b20      	ldr	r3, [pc, #128]	; (d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d2      	lsls	r2, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b1e      	ldr	r3, [pc, #120]	; (d5b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d0      	lsls	r0, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b1c      	ldr	r3, [pc, #112]	; (d5b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d1      	lsls	r1, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b1a      	ldr	r3, [pc, #104]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d2      	lsls	r2, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b18      	ldr	r3, [pc, #96]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d0      	lsls	r0, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b16      	ldr	r3, [pc, #88]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d1      	lsls	r1, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b14      	ldr	r3, [pc, #80]	; (d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d2      	lsls	r2, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b12      	ldr	r3, [pc, #72]	; (d5b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d0      	lsls	r0, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4b10      	ldr	r3, [pc, #64]	; (d5ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5b5e:	681a      	ldr	r2, [r3, #0]
   d5b60:	07d1      	lsls	r1, r2, #31
   d5b62:	bf5c      	itt	pl
   d5b64:	2201      	movpl	r2, #1
   d5b66:	601a      	strpl	r2, [r3, #0]
   d5b68:	4b0e      	ldr	r3, [pc, #56]	; (d5ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5b6a:	681a      	ldr	r2, [r3, #0]
   d5b6c:	07d2      	lsls	r2, r2, #31
   d5b6e:	bf5c      	itt	pl
   d5b70:	2201      	movpl	r2, #1
   d5b72:	601a      	strpl	r2, [r3, #0]
   d5b74:	4770      	bx	lr
   d5b76:	bf00      	nop
   d5b78:	2003e7cc 	.word	0x2003e7cc
   d5b7c:	2003e7c8 	.word	0x2003e7c8
   d5b80:	2003e7c4 	.word	0x2003e7c4
   d5b84:	2003e7c0 	.word	0x2003e7c0
   d5b88:	2003e7bc 	.word	0x2003e7bc
   d5b8c:	2003e7b8 	.word	0x2003e7b8
   d5b90:	2003e7b4 	.word	0x2003e7b4
   d5b94:	2003e7b0 	.word	0x2003e7b0
   d5b98:	2003e7ac 	.word	0x2003e7ac
   d5b9c:	2003e7a8 	.word	0x2003e7a8
   d5ba0:	2003e7a4 	.word	0x2003e7a4
   d5ba4:	2003e7a0 	.word	0x2003e7a0

000d5ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5ba8:	4b18      	ldr	r3, [pc, #96]	; (d5c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5baa:	681a      	ldr	r2, [r3, #0]
   d5bac:	07d1      	lsls	r1, r2, #31
   d5bae:	bf5c      	itt	pl
   d5bb0:	2201      	movpl	r2, #1
   d5bb2:	601a      	strpl	r2, [r3, #0]
   d5bb4:	4b16      	ldr	r3, [pc, #88]	; (d5c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5bb6:	681a      	ldr	r2, [r3, #0]
   d5bb8:	07d2      	lsls	r2, r2, #31
   d5bba:	bf5c      	itt	pl
   d5bbc:	2201      	movpl	r2, #1
   d5bbe:	601a      	strpl	r2, [r3, #0]
   d5bc0:	4b14      	ldr	r3, [pc, #80]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5bc2:	681a      	ldr	r2, [r3, #0]
   d5bc4:	07d0      	lsls	r0, r2, #31
   d5bc6:	bf5c      	itt	pl
   d5bc8:	2201      	movpl	r2, #1
   d5bca:	601a      	strpl	r2, [r3, #0]
   d5bcc:	4b12      	ldr	r3, [pc, #72]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	07d1      	lsls	r1, r2, #31
   d5bd2:	bf5c      	itt	pl
   d5bd4:	2201      	movpl	r2, #1
   d5bd6:	601a      	strpl	r2, [r3, #0]
   d5bd8:	4b10      	ldr	r3, [pc, #64]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5bda:	681a      	ldr	r2, [r3, #0]
   d5bdc:	07d2      	lsls	r2, r2, #31
   d5bde:	bf5c      	itt	pl
   d5be0:	2201      	movpl	r2, #1
   d5be2:	601a      	strpl	r2, [r3, #0]
   d5be4:	4b0e      	ldr	r3, [pc, #56]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	07d0      	lsls	r0, r2, #31
   d5bea:	bf5c      	itt	pl
   d5bec:	2201      	movpl	r2, #1
   d5bee:	601a      	strpl	r2, [r3, #0]
   d5bf0:	4b0c      	ldr	r3, [pc, #48]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5bf2:	681a      	ldr	r2, [r3, #0]
   d5bf4:	07d1      	lsls	r1, r2, #31
   d5bf6:	bf5c      	itt	pl
   d5bf8:	2201      	movpl	r2, #1
   d5bfa:	601a      	strpl	r2, [r3, #0]
   d5bfc:	4b0a      	ldr	r3, [pc, #40]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5bfe:	681a      	ldr	r2, [r3, #0]
   d5c00:	07d2      	lsls	r2, r2, #31
   d5c02:	bf5c      	itt	pl
   d5c04:	2201      	movpl	r2, #1
   d5c06:	601a      	strpl	r2, [r3, #0]
   d5c08:	4770      	bx	lr
   d5c0a:	bf00      	nop
   d5c0c:	2003e7ec 	.word	0x2003e7ec
   d5c10:	2003e7e8 	.word	0x2003e7e8
   d5c14:	2003e7e4 	.word	0x2003e7e4
   d5c18:	2003e7e0 	.word	0x2003e7e0
   d5c1c:	2003e7dc 	.word	0x2003e7dc
   d5c20:	2003e7d8 	.word	0x2003e7d8
   d5c24:	2003e7d4 	.word	0x2003e7d4
   d5c28:	2003e7d0 	.word	0x2003e7d0

000d5c2c <log>:
   d5c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c30:	ed2d 8b02 	vpush	{d8}
   d5c34:	b08b      	sub	sp, #44	; 0x2c
   d5c36:	ec55 4b10 	vmov	r4, r5, d0
   d5c3a:	f000 f881 	bl	d5d40 <__ieee754_log>
   d5c3e:	4b3a      	ldr	r3, [pc, #232]	; (d5d28 <log+0xfc>)
   d5c40:	eeb0 8a40 	vmov.f32	s16, s0
   d5c44:	eef0 8a60 	vmov.f32	s17, s1
   d5c48:	f993 6000 	ldrsb.w	r6, [r3]
   d5c4c:	1c73      	adds	r3, r6, #1
   d5c4e:	d00d      	beq.n	d5c6c <log+0x40>
   d5c50:	4622      	mov	r2, r4
   d5c52:	462b      	mov	r3, r5
   d5c54:	4620      	mov	r0, r4
   d5c56:	4629      	mov	r1, r5
   d5c58:	f000 fed4 	bl	d6a04 <__aeabi_dcmpun>
   d5c5c:	b930      	cbnz	r0, d5c6c <log+0x40>
   d5c5e:	2200      	movs	r2, #0
   d5c60:	2300      	movs	r3, #0
   d5c62:	4620      	mov	r0, r4
   d5c64:	4629      	mov	r1, r5
   d5c66:	f000 fec3 	bl	d69f0 <__aeabi_dcmpgt>
   d5c6a:	b140      	cbz	r0, d5c7e <log+0x52>
   d5c6c:	eeb0 0a48 	vmov.f32	s0, s16
   d5c70:	eef0 0a68 	vmov.f32	s1, s17
   d5c74:	b00b      	add	sp, #44	; 0x2c
   d5c76:	ecbd 8b02 	vpop	{d8}
   d5c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5c7e:	4b2b      	ldr	r3, [pc, #172]	; (d5d2c <log+0x100>)
   d5c80:	9008      	str	r0, [sp, #32]
   d5c82:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d5c86:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5c8a:	9301      	str	r3, [sp, #4]
   d5c8c:	b9de      	cbnz	r6, d5cc6 <log+0x9a>
   d5c8e:	4f28      	ldr	r7, [pc, #160]	; (d5d30 <log+0x104>)
   d5c90:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   d5c94:	4620      	mov	r0, r4
   d5c96:	4629      	mov	r1, r5
   d5c98:	2200      	movs	r2, #0
   d5c9a:	2300      	movs	r3, #0
   d5c9c:	e9cd 6706 	strd	r6, r7, [sp, #24]
   d5ca0:	f000 fe7e 	bl	d69a0 <__aeabi_dcmpeq>
   d5ca4:	2800      	cmp	r0, #0
   d5ca6:	d037      	beq.n	d5d18 <log+0xec>
   d5ca8:	2302      	movs	r3, #2
   d5caa:	9300      	str	r3, [sp, #0]
   d5cac:	4668      	mov	r0, sp
   d5cae:	f000 fa4b 	bl	d6148 <matherr>
   d5cb2:	b1c8      	cbz	r0, d5ce8 <log+0xbc>
   d5cb4:	9b08      	ldr	r3, [sp, #32]
   d5cb6:	b9e3      	cbnz	r3, d5cf2 <log+0xc6>
   d5cb8:	ed9d 0b06 	vldr	d0, [sp, #24]
   d5cbc:	b00b      	add	sp, #44	; 0x2c
   d5cbe:	ecbd 8b02 	vpop	{d8}
   d5cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5cc6:	f8df 9070 	ldr.w	r9, [pc, #112]	; d5d38 <log+0x10c>
   d5cca:	f04f 0800 	mov.w	r8, #0
   d5cce:	4620      	mov	r0, r4
   d5cd0:	4629      	mov	r1, r5
   d5cd2:	2200      	movs	r2, #0
   d5cd4:	2300      	movs	r3, #0
   d5cd6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d5cda:	f000 fe61 	bl	d69a0 <__aeabi_dcmpeq>
   d5cde:	b168      	cbz	r0, d5cfc <log+0xd0>
   d5ce0:	2302      	movs	r3, #2
   d5ce2:	429e      	cmp	r6, r3
   d5ce4:	9300      	str	r3, [sp, #0]
   d5ce6:	d1e1      	bne.n	d5cac <log+0x80>
   d5ce8:	f7fe fcfe 	bl	d46e8 <__errno>
   d5cec:	2322      	movs	r3, #34	; 0x22
   d5cee:	6003      	str	r3, [r0, #0]
   d5cf0:	e7e0      	b.n	d5cb4 <log+0x88>
   d5cf2:	f7fe fcf9 	bl	d46e8 <__errno>
   d5cf6:	9b08      	ldr	r3, [sp, #32]
   d5cf8:	6003      	str	r3, [r0, #0]
   d5cfa:	e7dd      	b.n	d5cb8 <log+0x8c>
   d5cfc:	2301      	movs	r3, #1
   d5cfe:	2e02      	cmp	r6, #2
   d5d00:	9300      	str	r3, [sp, #0]
   d5d02:	d10b      	bne.n	d5d1c <log+0xf0>
   d5d04:	f7fe fcf0 	bl	d46e8 <__errno>
   d5d08:	2321      	movs	r3, #33	; 0x21
   d5d0a:	6003      	str	r3, [r0, #0]
   d5d0c:	4809      	ldr	r0, [pc, #36]	; (d5d34 <log+0x108>)
   d5d0e:	f000 fa1f 	bl	d6150 <nan>
   d5d12:	ed8d 0b06 	vstr	d0, [sp, #24]
   d5d16:	e7cd      	b.n	d5cb4 <log+0x88>
   d5d18:	2301      	movs	r3, #1
   d5d1a:	9300      	str	r3, [sp, #0]
   d5d1c:	4668      	mov	r0, sp
   d5d1e:	f000 fa13 	bl	d6148 <matherr>
   d5d22:	2800      	cmp	r0, #0
   d5d24:	d1f2      	bne.n	d5d0c <log+0xe0>
   d5d26:	e7ed      	b.n	d5d04 <log+0xd8>
   d5d28:	2003e358 	.word	0x2003e358
   d5d2c:	000d71ac 	.word	0x000d71ac
   d5d30:	c7efffff 	.word	0xc7efffff
   d5d34:	000d71b0 	.word	0x000d71b0
   d5d38:	fff00000 	.word	0xfff00000
   d5d3c:	00000000 	.word	0x00000000

000d5d40 <__ieee754_log>:
   d5d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d44:	ec51 0b10 	vmov	r0, r1, d0
   d5d48:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5d4c:	b085      	sub	sp, #20
   d5d4e:	460b      	mov	r3, r1
   d5d50:	da59      	bge.n	d5e06 <__ieee754_log+0xc6>
   d5d52:	ee10 2a10 	vmov	r2, s0
   d5d56:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   d5d5a:	4322      	orrs	r2, r4
   d5d5c:	f000 80f8 	beq.w	d5f50 <__ieee754_log+0x210>
   d5d60:	2900      	cmp	r1, #0
   d5d62:	f2c0 8180 	blt.w	d6066 <__ieee754_log+0x326>
   d5d66:	2200      	movs	r2, #0
   d5d68:	4bdd      	ldr	r3, [pc, #884]	; (d60e0 <__ieee754_log+0x3a0>)
   d5d6a:	4cde      	ldr	r4, [pc, #888]	; (d60e4 <__ieee754_log+0x3a4>)
   d5d6c:	f000 fbb0 	bl	d64d0 <__aeabi_dmul>
   d5d70:	460b      	mov	r3, r1
   d5d72:	42a3      	cmp	r3, r4
   d5d74:	f06f 0235 	mvn.w	r2, #53	; 0x35
   d5d78:	dc4a      	bgt.n	d5e10 <__ieee754_log+0xd0>
   d5d7a:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d5d7e:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   d5d82:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   d5d86:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   d5d8a:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   d5d8e:	151b      	asrs	r3, r3, #20
   d5d90:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   d5d94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d5d98:	ea44 0105 	orr.w	r1, r4, r5
   d5d9c:	189c      	adds	r4, r3, r2
   d5d9e:	2200      	movs	r2, #0
   d5da0:	4bd1      	ldr	r3, [pc, #836]	; (d60e8 <__ieee754_log+0x3a8>)
   d5da2:	f000 f9e1 	bl	d6168 <__aeabi_dsub>
   d5da6:	1cab      	adds	r3, r5, #2
   d5da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d5dac:	2b02      	cmp	r3, #2
   d5dae:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   d5db2:	4682      	mov	sl, r0
   d5db4:	468b      	mov	fp, r1
   d5db6:	f04f 0200 	mov.w	r2, #0
   d5dba:	dc32      	bgt.n	d5e22 <__ieee754_log+0xe2>
   d5dbc:	2300      	movs	r3, #0
   d5dbe:	f000 fdef 	bl	d69a0 <__aeabi_dcmpeq>
   d5dc2:	2800      	cmp	r0, #0
   d5dc4:	f000 80cf 	beq.w	d5f66 <__ieee754_log+0x226>
   d5dc8:	2c00      	cmp	r4, #0
   d5dca:	f000 8158 	beq.w	d607e <__ieee754_log+0x33e>
   d5dce:	4620      	mov	r0, r4
   d5dd0:	f000 fb18 	bl	d6404 <__aeabi_i2d>
   d5dd4:	a3ac      	add	r3, pc, #688	; (adr r3, d6088 <__ieee754_log+0x348>)
   d5dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5dda:	4606      	mov	r6, r0
   d5ddc:	460f      	mov	r7, r1
   d5dde:	f000 fb77 	bl	d64d0 <__aeabi_dmul>
   d5de2:	a3ab      	add	r3, pc, #684	; (adr r3, d6090 <__ieee754_log+0x350>)
   d5de4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5de8:	4604      	mov	r4, r0
   d5dea:	460d      	mov	r5, r1
   d5dec:	4630      	mov	r0, r6
   d5dee:	4639      	mov	r1, r7
   d5df0:	f000 fb6e 	bl	d64d0 <__aeabi_dmul>
   d5df4:	4602      	mov	r2, r0
   d5df6:	460b      	mov	r3, r1
   d5df8:	4620      	mov	r0, r4
   d5dfa:	4629      	mov	r1, r5
   d5dfc:	f000 f9b6 	bl	d616c <__adddf3>
   d5e00:	ec41 0b10 	vmov	d0, r0, r1
   d5e04:	e00a      	b.n	d5e1c <__ieee754_log+0xdc>
   d5e06:	4cb7      	ldr	r4, [pc, #732]	; (d60e4 <__ieee754_log+0x3a4>)
   d5e08:	42a3      	cmp	r3, r4
   d5e0a:	f04f 0200 	mov.w	r2, #0
   d5e0e:	ddb4      	ble.n	d5d7a <__ieee754_log+0x3a>
   d5e10:	4602      	mov	r2, r0
   d5e12:	460b      	mov	r3, r1
   d5e14:	f000 f9aa 	bl	d616c <__adddf3>
   d5e18:	ec41 0b10 	vmov	d0, r0, r1
   d5e1c:	b005      	add	sp, #20
   d5e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d5e26:	f000 f9a1 	bl	d616c <__adddf3>
   d5e2a:	4602      	mov	r2, r0
   d5e2c:	460b      	mov	r3, r1
   d5e2e:	4650      	mov	r0, sl
   d5e30:	4659      	mov	r1, fp
   d5e32:	f000 fc77 	bl	d6724 <__aeabi_ddiv>
   d5e36:	4606      	mov	r6, r0
   d5e38:	4620      	mov	r0, r4
   d5e3a:	460f      	mov	r7, r1
   d5e3c:	f000 fae2 	bl	d6404 <__aeabi_i2d>
   d5e40:	4632      	mov	r2, r6
   d5e42:	e9cd 0100 	strd	r0, r1, [sp]
   d5e46:	463b      	mov	r3, r7
   d5e48:	4630      	mov	r0, r6
   d5e4a:	4639      	mov	r1, r7
   d5e4c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5e50:	f000 fb3e 	bl	d64d0 <__aeabi_dmul>
   d5e54:	4602      	mov	r2, r0
   d5e56:	460b      	mov	r3, r1
   d5e58:	4680      	mov	r8, r0
   d5e5a:	4689      	mov	r9, r1
   d5e5c:	f000 fb38 	bl	d64d0 <__aeabi_dmul>
   d5e60:	a38d      	add	r3, pc, #564	; (adr r3, d6098 <__ieee754_log+0x358>)
   d5e62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e66:	4606      	mov	r6, r0
   d5e68:	460f      	mov	r7, r1
   d5e6a:	f000 fb31 	bl	d64d0 <__aeabi_dmul>
   d5e6e:	a38c      	add	r3, pc, #560	; (adr r3, d60a0 <__ieee754_log+0x360>)
   d5e70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e74:	f000 f97a 	bl	d616c <__adddf3>
   d5e78:	4632      	mov	r2, r6
   d5e7a:	463b      	mov	r3, r7
   d5e7c:	f000 fb28 	bl	d64d0 <__aeabi_dmul>
   d5e80:	a389      	add	r3, pc, #548	; (adr r3, d60a8 <__ieee754_log+0x368>)
   d5e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e86:	f000 f971 	bl	d616c <__adddf3>
   d5e8a:	4632      	mov	r2, r6
   d5e8c:	463b      	mov	r3, r7
   d5e8e:	f000 fb1f 	bl	d64d0 <__aeabi_dmul>
   d5e92:	a387      	add	r3, pc, #540	; (adr r3, d60b0 <__ieee754_log+0x370>)
   d5e94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e98:	f000 f968 	bl	d616c <__adddf3>
   d5e9c:	4642      	mov	r2, r8
   d5e9e:	464b      	mov	r3, r9
   d5ea0:	f000 fb16 	bl	d64d0 <__aeabi_dmul>
   d5ea4:	a384      	add	r3, pc, #528	; (adr r3, d60b8 <__ieee754_log+0x378>)
   d5ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5eaa:	4680      	mov	r8, r0
   d5eac:	4689      	mov	r9, r1
   d5eae:	4630      	mov	r0, r6
   d5eb0:	4639      	mov	r1, r7
   d5eb2:	f000 fb0d 	bl	d64d0 <__aeabi_dmul>
   d5eb6:	a382      	add	r3, pc, #520	; (adr r3, d60c0 <__ieee754_log+0x380>)
   d5eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ebc:	f000 f956 	bl	d616c <__adddf3>
   d5ec0:	4632      	mov	r2, r6
   d5ec2:	463b      	mov	r3, r7
   d5ec4:	f000 fb04 	bl	d64d0 <__aeabi_dmul>
   d5ec8:	a37f      	add	r3, pc, #508	; (adr r3, d60c8 <__ieee754_log+0x388>)
   d5eca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ece:	f000 f94d 	bl	d616c <__adddf3>
   d5ed2:	4632      	mov	r2, r6
   d5ed4:	463b      	mov	r3, r7
   d5ed6:	f000 fafb 	bl	d64d0 <__aeabi_dmul>
   d5eda:	460b      	mov	r3, r1
   d5edc:	4602      	mov	r2, r0
   d5ede:	4649      	mov	r1, r9
   d5ee0:	4640      	mov	r0, r8
   d5ee2:	f000 f943 	bl	d616c <__adddf3>
   d5ee6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   d5eea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   d5eee:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   d5ef2:	3551      	adds	r5, #81	; 0x51
   d5ef4:	431d      	orrs	r5, r3
   d5ef6:	2d00      	cmp	r5, #0
   d5ef8:	4680      	mov	r8, r0
   d5efa:	4689      	mov	r9, r1
   d5efc:	dd5c      	ble.n	d5fb8 <__ieee754_log+0x278>
   d5efe:	2200      	movs	r2, #0
   d5f00:	4b7a      	ldr	r3, [pc, #488]	; (d60ec <__ieee754_log+0x3ac>)
   d5f02:	4650      	mov	r0, sl
   d5f04:	4659      	mov	r1, fp
   d5f06:	f000 fae3 	bl	d64d0 <__aeabi_dmul>
   d5f0a:	4652      	mov	r2, sl
   d5f0c:	465b      	mov	r3, fp
   d5f0e:	f000 fadf 	bl	d64d0 <__aeabi_dmul>
   d5f12:	4606      	mov	r6, r0
   d5f14:	460f      	mov	r7, r1
   d5f16:	2c00      	cmp	r4, #0
   d5f18:	d16e      	bne.n	d5ff8 <__ieee754_log+0x2b8>
   d5f1a:	4632      	mov	r2, r6
   d5f1c:	463b      	mov	r3, r7
   d5f1e:	4640      	mov	r0, r8
   d5f20:	4649      	mov	r1, r9
   d5f22:	f000 f923 	bl	d616c <__adddf3>
   d5f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5f2a:	f000 fad1 	bl	d64d0 <__aeabi_dmul>
   d5f2e:	4602      	mov	r2, r0
   d5f30:	460b      	mov	r3, r1
   d5f32:	4630      	mov	r0, r6
   d5f34:	4639      	mov	r1, r7
   d5f36:	f000 f917 	bl	d6168 <__aeabi_dsub>
   d5f3a:	4602      	mov	r2, r0
   d5f3c:	460b      	mov	r3, r1
   d5f3e:	4650      	mov	r0, sl
   d5f40:	4659      	mov	r1, fp
   d5f42:	f000 f911 	bl	d6168 <__aeabi_dsub>
   d5f46:	ec41 0b10 	vmov	d0, r0, r1
   d5f4a:	b005      	add	sp, #20
   d5f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f50:	2200      	movs	r2, #0
   d5f52:	2300      	movs	r3, #0
   d5f54:	2000      	movs	r0, #0
   d5f56:	4966      	ldr	r1, [pc, #408]	; (d60f0 <__ieee754_log+0x3b0>)
   d5f58:	f000 fbe4 	bl	d6724 <__aeabi_ddiv>
   d5f5c:	ec41 0b10 	vmov	d0, r0, r1
   d5f60:	b005      	add	sp, #20
   d5f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f66:	a35a      	add	r3, pc, #360	; (adr r3, d60d0 <__ieee754_log+0x390>)
   d5f68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f6c:	4650      	mov	r0, sl
   d5f6e:	4659      	mov	r1, fp
   d5f70:	f000 faae 	bl	d64d0 <__aeabi_dmul>
   d5f74:	4602      	mov	r2, r0
   d5f76:	460b      	mov	r3, r1
   d5f78:	2000      	movs	r0, #0
   d5f7a:	495c      	ldr	r1, [pc, #368]	; (d60ec <__ieee754_log+0x3ac>)
   d5f7c:	f000 f8f4 	bl	d6168 <__aeabi_dsub>
   d5f80:	4652      	mov	r2, sl
   d5f82:	4606      	mov	r6, r0
   d5f84:	460f      	mov	r7, r1
   d5f86:	465b      	mov	r3, fp
   d5f88:	4650      	mov	r0, sl
   d5f8a:	4659      	mov	r1, fp
   d5f8c:	f000 faa0 	bl	d64d0 <__aeabi_dmul>
   d5f90:	4602      	mov	r2, r0
   d5f92:	460b      	mov	r3, r1
   d5f94:	4630      	mov	r0, r6
   d5f96:	4639      	mov	r1, r7
   d5f98:	f000 fa9a 	bl	d64d0 <__aeabi_dmul>
   d5f9c:	4606      	mov	r6, r0
   d5f9e:	460f      	mov	r7, r1
   d5fa0:	2c00      	cmp	r4, #0
   d5fa2:	f040 80a7 	bne.w	d60f4 <__ieee754_log+0x3b4>
   d5fa6:	4602      	mov	r2, r0
   d5fa8:	460b      	mov	r3, r1
   d5faa:	4650      	mov	r0, sl
   d5fac:	4659      	mov	r1, fp
   d5fae:	f000 f8db 	bl	d6168 <__aeabi_dsub>
   d5fb2:	ec41 0b10 	vmov	d0, r0, r1
   d5fb6:	e731      	b.n	d5e1c <__ieee754_log+0xdc>
   d5fb8:	2c00      	cmp	r4, #0
   d5fba:	f000 80af 	beq.w	d611c <__ieee754_log+0x3dc>
   d5fbe:	a332      	add	r3, pc, #200	; (adr r3, d6088 <__ieee754_log+0x348>)
   d5fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
   d5fc8:	f000 fa82 	bl	d64d0 <__aeabi_dmul>
   d5fcc:	4642      	mov	r2, r8
   d5fce:	464b      	mov	r3, r9
   d5fd0:	4604      	mov	r4, r0
   d5fd2:	460d      	mov	r5, r1
   d5fd4:	4650      	mov	r0, sl
   d5fd6:	4659      	mov	r1, fp
   d5fd8:	f000 f8c6 	bl	d6168 <__aeabi_dsub>
   d5fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5fe0:	f000 fa76 	bl	d64d0 <__aeabi_dmul>
   d5fe4:	a32a      	add	r3, pc, #168	; (adr r3, d6090 <__ieee754_log+0x350>)
   d5fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5fea:	4606      	mov	r6, r0
   d5fec:	460f      	mov	r7, r1
   d5fee:	e9dd 0100 	ldrd	r0, r1, [sp]
   d5ff2:	f000 fa6d 	bl	d64d0 <__aeabi_dmul>
   d5ff6:	e021      	b.n	d603c <__ieee754_log+0x2fc>
   d5ff8:	a323      	add	r3, pc, #140	; (adr r3, d6088 <__ieee754_log+0x348>)
   d5ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6002:	f000 fa65 	bl	d64d0 <__aeabi_dmul>
   d6006:	4632      	mov	r2, r6
   d6008:	463b      	mov	r3, r7
   d600a:	4604      	mov	r4, r0
   d600c:	460d      	mov	r5, r1
   d600e:	4640      	mov	r0, r8
   d6010:	4649      	mov	r1, r9
   d6012:	f000 f8ab 	bl	d616c <__adddf3>
   d6016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d601a:	f000 fa59 	bl	d64d0 <__aeabi_dmul>
   d601e:	a31c      	add	r3, pc, #112	; (adr r3, d6090 <__ieee754_log+0x350>)
   d6020:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6024:	4680      	mov	r8, r0
   d6026:	4689      	mov	r9, r1
   d6028:	e9dd 0100 	ldrd	r0, r1, [sp]
   d602c:	f000 fa50 	bl	d64d0 <__aeabi_dmul>
   d6030:	4602      	mov	r2, r0
   d6032:	460b      	mov	r3, r1
   d6034:	4640      	mov	r0, r8
   d6036:	4649      	mov	r1, r9
   d6038:	f000 f898 	bl	d616c <__adddf3>
   d603c:	4602      	mov	r2, r0
   d603e:	460b      	mov	r3, r1
   d6040:	4630      	mov	r0, r6
   d6042:	4639      	mov	r1, r7
   d6044:	f000 f890 	bl	d6168 <__aeabi_dsub>
   d6048:	4652      	mov	r2, sl
   d604a:	465b      	mov	r3, fp
   d604c:	f000 f88c 	bl	d6168 <__aeabi_dsub>
   d6050:	4602      	mov	r2, r0
   d6052:	460b      	mov	r3, r1
   d6054:	4620      	mov	r0, r4
   d6056:	4629      	mov	r1, r5
   d6058:	f000 f886 	bl	d6168 <__aeabi_dsub>
   d605c:	ec41 0b10 	vmov	d0, r0, r1
   d6060:	b005      	add	sp, #20
   d6062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6066:	ee10 2a10 	vmov	r2, s0
   d606a:	460b      	mov	r3, r1
   d606c:	f000 f87c 	bl	d6168 <__aeabi_dsub>
   d6070:	2200      	movs	r2, #0
   d6072:	2300      	movs	r3, #0
   d6074:	f000 fb56 	bl	d6724 <__aeabi_ddiv>
   d6078:	ec41 0b10 	vmov	d0, r0, r1
   d607c:	e6ce      	b.n	d5e1c <__ieee754_log+0xdc>
   d607e:	ed9f 0b16 	vldr	d0, [pc, #88]	; d60d8 <__ieee754_log+0x398>
   d6082:	e6cb      	b.n	d5e1c <__ieee754_log+0xdc>
   d6084:	f3af 8000 	nop.w
   d6088:	fee00000 	.word	0xfee00000
   d608c:	3fe62e42 	.word	0x3fe62e42
   d6090:	35793c76 	.word	0x35793c76
   d6094:	3dea39ef 	.word	0x3dea39ef
   d6098:	df3e5244 	.word	0xdf3e5244
   d609c:	3fc2f112 	.word	0x3fc2f112
   d60a0:	96cb03de 	.word	0x96cb03de
   d60a4:	3fc74664 	.word	0x3fc74664
   d60a8:	94229359 	.word	0x94229359
   d60ac:	3fd24924 	.word	0x3fd24924
   d60b0:	55555593 	.word	0x55555593
   d60b4:	3fe55555 	.word	0x3fe55555
   d60b8:	d078c69f 	.word	0xd078c69f
   d60bc:	3fc39a09 	.word	0x3fc39a09
   d60c0:	1d8e78af 	.word	0x1d8e78af
   d60c4:	3fcc71c5 	.word	0x3fcc71c5
   d60c8:	9997fa04 	.word	0x9997fa04
   d60cc:	3fd99999 	.word	0x3fd99999
   d60d0:	55555555 	.word	0x55555555
   d60d4:	3fd55555 	.word	0x3fd55555
	...
   d60e0:	43500000 	.word	0x43500000
   d60e4:	7fefffff 	.word	0x7fefffff
   d60e8:	3ff00000 	.word	0x3ff00000
   d60ec:	3fe00000 	.word	0x3fe00000
   d60f0:	c3500000 	.word	0xc3500000
   d60f4:	4620      	mov	r0, r4
   d60f6:	f000 f985 	bl	d6404 <__aeabi_i2d>
   d60fa:	a30f      	add	r3, pc, #60	; (adr r3, d6138 <__ieee754_log+0x3f8>)
   d60fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6100:	4680      	mov	r8, r0
   d6102:	4689      	mov	r9, r1
   d6104:	f000 f9e4 	bl	d64d0 <__aeabi_dmul>
   d6108:	a30d      	add	r3, pc, #52	; (adr r3, d6140 <__ieee754_log+0x400>)
   d610a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d610e:	4604      	mov	r4, r0
   d6110:	460d      	mov	r5, r1
   d6112:	4640      	mov	r0, r8
   d6114:	4649      	mov	r1, r9
   d6116:	f000 f9db 	bl	d64d0 <__aeabi_dmul>
   d611a:	e78f      	b.n	d603c <__ieee754_log+0x2fc>
   d611c:	4602      	mov	r2, r0
   d611e:	460b      	mov	r3, r1
   d6120:	4650      	mov	r0, sl
   d6122:	4659      	mov	r1, fp
   d6124:	f000 f820 	bl	d6168 <__aeabi_dsub>
   d6128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d612c:	f000 f9d0 	bl	d64d0 <__aeabi_dmul>
   d6130:	e703      	b.n	d5f3a <__ieee754_log+0x1fa>
   d6132:	bf00      	nop
   d6134:	f3af 8000 	nop.w
   d6138:	fee00000 	.word	0xfee00000
   d613c:	3fe62e42 	.word	0x3fe62e42
   d6140:	35793c76 	.word	0x35793c76
   d6144:	3dea39ef 	.word	0x3dea39ef

000d6148 <matherr>:
   d6148:	2000      	movs	r0, #0
   d614a:	4770      	bx	lr
   d614c:	0000      	movs	r0, r0
	...

000d6150 <nan>:
   d6150:	ed9f 0b01 	vldr	d0, [pc, #4]	; d6158 <nan+0x8>
   d6154:	4770      	bx	lr
   d6156:	bf00      	nop
   d6158:	00000000 	.word	0x00000000
   d615c:	7ff80000 	.word	0x7ff80000

000d6160 <__aeabi_drsub>:
   d6160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6164:	e002      	b.n	d616c <__adddf3>
   d6166:	bf00      	nop

000d6168 <__aeabi_dsub>:
   d6168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d616c <__adddf3>:
   d616c:	b530      	push	{r4, r5, lr}
   d616e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6172:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6176:	ea94 0f05 	teq	r4, r5
   d617a:	bf08      	it	eq
   d617c:	ea90 0f02 	teqeq	r0, r2
   d6180:	bf1f      	itttt	ne
   d6182:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6186:	ea55 0c02 	orrsne.w	ip, r5, r2
   d618a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d618e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6192:	f000 80e2 	beq.w	d635a <__adddf3+0x1ee>
   d6196:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d619a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d619e:	bfb8      	it	lt
   d61a0:	426d      	neglt	r5, r5
   d61a2:	dd0c      	ble.n	d61be <__adddf3+0x52>
   d61a4:	442c      	add	r4, r5
   d61a6:	ea80 0202 	eor.w	r2, r0, r2
   d61aa:	ea81 0303 	eor.w	r3, r1, r3
   d61ae:	ea82 0000 	eor.w	r0, r2, r0
   d61b2:	ea83 0101 	eor.w	r1, r3, r1
   d61b6:	ea80 0202 	eor.w	r2, r0, r2
   d61ba:	ea81 0303 	eor.w	r3, r1, r3
   d61be:	2d36      	cmp	r5, #54	; 0x36
   d61c0:	bf88      	it	hi
   d61c2:	bd30      	pophi	{r4, r5, pc}
   d61c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d61c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d61cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d61d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d61d4:	d002      	beq.n	d61dc <__adddf3+0x70>
   d61d6:	4240      	negs	r0, r0
   d61d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d61dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d61e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d61e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d61e8:	d002      	beq.n	d61f0 <__adddf3+0x84>
   d61ea:	4252      	negs	r2, r2
   d61ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d61f0:	ea94 0f05 	teq	r4, r5
   d61f4:	f000 80a7 	beq.w	d6346 <__adddf3+0x1da>
   d61f8:	f1a4 0401 	sub.w	r4, r4, #1
   d61fc:	f1d5 0e20 	rsbs	lr, r5, #32
   d6200:	db0d      	blt.n	d621e <__adddf3+0xb2>
   d6202:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6206:	fa22 f205 	lsr.w	r2, r2, r5
   d620a:	1880      	adds	r0, r0, r2
   d620c:	f141 0100 	adc.w	r1, r1, #0
   d6210:	fa03 f20e 	lsl.w	r2, r3, lr
   d6214:	1880      	adds	r0, r0, r2
   d6216:	fa43 f305 	asr.w	r3, r3, r5
   d621a:	4159      	adcs	r1, r3
   d621c:	e00e      	b.n	d623c <__adddf3+0xd0>
   d621e:	f1a5 0520 	sub.w	r5, r5, #32
   d6222:	f10e 0e20 	add.w	lr, lr, #32
   d6226:	2a01      	cmp	r2, #1
   d6228:	fa03 fc0e 	lsl.w	ip, r3, lr
   d622c:	bf28      	it	cs
   d622e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6232:	fa43 f305 	asr.w	r3, r3, r5
   d6236:	18c0      	adds	r0, r0, r3
   d6238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d623c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6240:	d507      	bpl.n	d6252 <__adddf3+0xe6>
   d6242:	f04f 0e00 	mov.w	lr, #0
   d6246:	f1dc 0c00 	rsbs	ip, ip, #0
   d624a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d624e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6256:	d31b      	bcc.n	d6290 <__adddf3+0x124>
   d6258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d625c:	d30c      	bcc.n	d6278 <__adddf3+0x10c>
   d625e:	0849      	lsrs	r1, r1, #1
   d6260:	ea5f 0030 	movs.w	r0, r0, rrx
   d6264:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6268:	f104 0401 	add.w	r4, r4, #1
   d626c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6274:	f080 809a 	bcs.w	d63ac <__adddf3+0x240>
   d6278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d627c:	bf08      	it	eq
   d627e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6282:	f150 0000 	adcs.w	r0, r0, #0
   d6286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d628a:	ea41 0105 	orr.w	r1, r1, r5
   d628e:	bd30      	pop	{r4, r5, pc}
   d6290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6294:	4140      	adcs	r0, r0
   d6296:	eb41 0101 	adc.w	r1, r1, r1
   d629a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d629e:	f1a4 0401 	sub.w	r4, r4, #1
   d62a2:	d1e9      	bne.n	d6278 <__adddf3+0x10c>
   d62a4:	f091 0f00 	teq	r1, #0
   d62a8:	bf04      	itt	eq
   d62aa:	4601      	moveq	r1, r0
   d62ac:	2000      	moveq	r0, #0
   d62ae:	fab1 f381 	clz	r3, r1
   d62b2:	bf08      	it	eq
   d62b4:	3320      	addeq	r3, #32
   d62b6:	f1a3 030b 	sub.w	r3, r3, #11
   d62ba:	f1b3 0220 	subs.w	r2, r3, #32
   d62be:	da0c      	bge.n	d62da <__adddf3+0x16e>
   d62c0:	320c      	adds	r2, #12
   d62c2:	dd08      	ble.n	d62d6 <__adddf3+0x16a>
   d62c4:	f102 0c14 	add.w	ip, r2, #20
   d62c8:	f1c2 020c 	rsb	r2, r2, #12
   d62cc:	fa01 f00c 	lsl.w	r0, r1, ip
   d62d0:	fa21 f102 	lsr.w	r1, r1, r2
   d62d4:	e00c      	b.n	d62f0 <__adddf3+0x184>
   d62d6:	f102 0214 	add.w	r2, r2, #20
   d62da:	bfd8      	it	le
   d62dc:	f1c2 0c20 	rsble	ip, r2, #32
   d62e0:	fa01 f102 	lsl.w	r1, r1, r2
   d62e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d62e8:	bfdc      	itt	le
   d62ea:	ea41 010c 	orrle.w	r1, r1, ip
   d62ee:	4090      	lslle	r0, r2
   d62f0:	1ae4      	subs	r4, r4, r3
   d62f2:	bfa2      	ittt	ge
   d62f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d62f8:	4329      	orrge	r1, r5
   d62fa:	bd30      	popge	{r4, r5, pc}
   d62fc:	ea6f 0404 	mvn.w	r4, r4
   d6300:	3c1f      	subs	r4, #31
   d6302:	da1c      	bge.n	d633e <__adddf3+0x1d2>
   d6304:	340c      	adds	r4, #12
   d6306:	dc0e      	bgt.n	d6326 <__adddf3+0x1ba>
   d6308:	f104 0414 	add.w	r4, r4, #20
   d630c:	f1c4 0220 	rsb	r2, r4, #32
   d6310:	fa20 f004 	lsr.w	r0, r0, r4
   d6314:	fa01 f302 	lsl.w	r3, r1, r2
   d6318:	ea40 0003 	orr.w	r0, r0, r3
   d631c:	fa21 f304 	lsr.w	r3, r1, r4
   d6320:	ea45 0103 	orr.w	r1, r5, r3
   d6324:	bd30      	pop	{r4, r5, pc}
   d6326:	f1c4 040c 	rsb	r4, r4, #12
   d632a:	f1c4 0220 	rsb	r2, r4, #32
   d632e:	fa20 f002 	lsr.w	r0, r0, r2
   d6332:	fa01 f304 	lsl.w	r3, r1, r4
   d6336:	ea40 0003 	orr.w	r0, r0, r3
   d633a:	4629      	mov	r1, r5
   d633c:	bd30      	pop	{r4, r5, pc}
   d633e:	fa21 f004 	lsr.w	r0, r1, r4
   d6342:	4629      	mov	r1, r5
   d6344:	bd30      	pop	{r4, r5, pc}
   d6346:	f094 0f00 	teq	r4, #0
   d634a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d634e:	bf06      	itte	eq
   d6350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6354:	3401      	addeq	r4, #1
   d6356:	3d01      	subne	r5, #1
   d6358:	e74e      	b.n	d61f8 <__adddf3+0x8c>
   d635a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d635e:	bf18      	it	ne
   d6360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6364:	d029      	beq.n	d63ba <__adddf3+0x24e>
   d6366:	ea94 0f05 	teq	r4, r5
   d636a:	bf08      	it	eq
   d636c:	ea90 0f02 	teqeq	r0, r2
   d6370:	d005      	beq.n	d637e <__adddf3+0x212>
   d6372:	ea54 0c00 	orrs.w	ip, r4, r0
   d6376:	bf04      	itt	eq
   d6378:	4619      	moveq	r1, r3
   d637a:	4610      	moveq	r0, r2
   d637c:	bd30      	pop	{r4, r5, pc}
   d637e:	ea91 0f03 	teq	r1, r3
   d6382:	bf1e      	ittt	ne
   d6384:	2100      	movne	r1, #0
   d6386:	2000      	movne	r0, #0
   d6388:	bd30      	popne	{r4, r5, pc}
   d638a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d638e:	d105      	bne.n	d639c <__adddf3+0x230>
   d6390:	0040      	lsls	r0, r0, #1
   d6392:	4149      	adcs	r1, r1
   d6394:	bf28      	it	cs
   d6396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d639a:	bd30      	pop	{r4, r5, pc}
   d639c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d63a0:	bf3c      	itt	cc
   d63a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d63a6:	bd30      	popcc	{r4, r5, pc}
   d63a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d63b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d63b4:	f04f 0000 	mov.w	r0, #0
   d63b8:	bd30      	pop	{r4, r5, pc}
   d63ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d63be:	bf1a      	itte	ne
   d63c0:	4619      	movne	r1, r3
   d63c2:	4610      	movne	r0, r2
   d63c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d63c8:	bf1c      	itt	ne
   d63ca:	460b      	movne	r3, r1
   d63cc:	4602      	movne	r2, r0
   d63ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d63d2:	bf06      	itte	eq
   d63d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d63d8:	ea91 0f03 	teqeq	r1, r3
   d63dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d63e0:	bd30      	pop	{r4, r5, pc}
   d63e2:	bf00      	nop

000d63e4 <__aeabi_ui2d>:
   d63e4:	f090 0f00 	teq	r0, #0
   d63e8:	bf04      	itt	eq
   d63ea:	2100      	moveq	r1, #0
   d63ec:	4770      	bxeq	lr
   d63ee:	b530      	push	{r4, r5, lr}
   d63f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d63f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d63f8:	f04f 0500 	mov.w	r5, #0
   d63fc:	f04f 0100 	mov.w	r1, #0
   d6400:	e750      	b.n	d62a4 <__adddf3+0x138>
   d6402:	bf00      	nop

000d6404 <__aeabi_i2d>:
   d6404:	f090 0f00 	teq	r0, #0
   d6408:	bf04      	itt	eq
   d640a:	2100      	moveq	r1, #0
   d640c:	4770      	bxeq	lr
   d640e:	b530      	push	{r4, r5, lr}
   d6410:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6414:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d641c:	bf48      	it	mi
   d641e:	4240      	negmi	r0, r0
   d6420:	f04f 0100 	mov.w	r1, #0
   d6424:	e73e      	b.n	d62a4 <__adddf3+0x138>
   d6426:	bf00      	nop

000d6428 <__aeabi_f2d>:
   d6428:	0042      	lsls	r2, r0, #1
   d642a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d642e:	ea4f 0131 	mov.w	r1, r1, rrx
   d6432:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6436:	bf1f      	itttt	ne
   d6438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d643c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6444:	4770      	bxne	lr
   d6446:	f092 0f00 	teq	r2, #0
   d644a:	bf14      	ite	ne
   d644c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6450:	4770      	bxeq	lr
   d6452:	b530      	push	{r4, r5, lr}
   d6454:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d645c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6460:	e720      	b.n	d62a4 <__adddf3+0x138>
   d6462:	bf00      	nop

000d6464 <__aeabi_ul2d>:
   d6464:	ea50 0201 	orrs.w	r2, r0, r1
   d6468:	bf08      	it	eq
   d646a:	4770      	bxeq	lr
   d646c:	b530      	push	{r4, r5, lr}
   d646e:	f04f 0500 	mov.w	r5, #0
   d6472:	e00a      	b.n	d648a <__aeabi_l2d+0x16>

000d6474 <__aeabi_l2d>:
   d6474:	ea50 0201 	orrs.w	r2, r0, r1
   d6478:	bf08      	it	eq
   d647a:	4770      	bxeq	lr
   d647c:	b530      	push	{r4, r5, lr}
   d647e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6482:	d502      	bpl.n	d648a <__aeabi_l2d+0x16>
   d6484:	4240      	negs	r0, r0
   d6486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d648a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d648e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6496:	f43f aedc 	beq.w	d6252 <__adddf3+0xe6>
   d649a:	f04f 0203 	mov.w	r2, #3
   d649e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d64a2:	bf18      	it	ne
   d64a4:	3203      	addne	r2, #3
   d64a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d64aa:	bf18      	it	ne
   d64ac:	3203      	addne	r2, #3
   d64ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d64b2:	f1c2 0320 	rsb	r3, r2, #32
   d64b6:	fa00 fc03 	lsl.w	ip, r0, r3
   d64ba:	fa20 f002 	lsr.w	r0, r0, r2
   d64be:	fa01 fe03 	lsl.w	lr, r1, r3
   d64c2:	ea40 000e 	orr.w	r0, r0, lr
   d64c6:	fa21 f102 	lsr.w	r1, r1, r2
   d64ca:	4414      	add	r4, r2
   d64cc:	e6c1      	b.n	d6252 <__adddf3+0xe6>
   d64ce:	bf00      	nop

000d64d0 <__aeabi_dmul>:
   d64d0:	b570      	push	{r4, r5, r6, lr}
   d64d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d64d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d64da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d64de:	bf1d      	ittte	ne
   d64e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d64e4:	ea94 0f0c 	teqne	r4, ip
   d64e8:	ea95 0f0c 	teqne	r5, ip
   d64ec:	f000 f8de 	bleq	d66ac <__aeabi_dmul+0x1dc>
   d64f0:	442c      	add	r4, r5
   d64f2:	ea81 0603 	eor.w	r6, r1, r3
   d64f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d64fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d64fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6502:	bf18      	it	ne
   d6504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d650c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6510:	d038      	beq.n	d6584 <__aeabi_dmul+0xb4>
   d6512:	fba0 ce02 	umull	ip, lr, r0, r2
   d6516:	f04f 0500 	mov.w	r5, #0
   d651a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d651e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6522:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6526:	f04f 0600 	mov.w	r6, #0
   d652a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d652e:	f09c 0f00 	teq	ip, #0
   d6532:	bf18      	it	ne
   d6534:	f04e 0e01 	orrne.w	lr, lr, #1
   d6538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d653c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6544:	d204      	bcs.n	d6550 <__aeabi_dmul+0x80>
   d6546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d654a:	416d      	adcs	r5, r5
   d654c:	eb46 0606 	adc.w	r6, r6, r6
   d6550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d655c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6568:	bf88      	it	hi
   d656a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d656e:	d81e      	bhi.n	d65ae <__aeabi_dmul+0xde>
   d6570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6574:	bf08      	it	eq
   d6576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d657a:	f150 0000 	adcs.w	r0, r0, #0
   d657e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6582:	bd70      	pop	{r4, r5, r6, pc}
   d6584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6588:	ea46 0101 	orr.w	r1, r6, r1
   d658c:	ea40 0002 	orr.w	r0, r0, r2
   d6590:	ea81 0103 	eor.w	r1, r1, r3
   d6594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6598:	bfc2      	ittt	gt
   d659a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d659e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d65a2:	bd70      	popgt	{r4, r5, r6, pc}
   d65a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d65a8:	f04f 0e00 	mov.w	lr, #0
   d65ac:	3c01      	subs	r4, #1
   d65ae:	f300 80ab 	bgt.w	d6708 <__aeabi_dmul+0x238>
   d65b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d65b6:	bfde      	ittt	le
   d65b8:	2000      	movle	r0, #0
   d65ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d65be:	bd70      	pople	{r4, r5, r6, pc}
   d65c0:	f1c4 0400 	rsb	r4, r4, #0
   d65c4:	3c20      	subs	r4, #32
   d65c6:	da35      	bge.n	d6634 <__aeabi_dmul+0x164>
   d65c8:	340c      	adds	r4, #12
   d65ca:	dc1b      	bgt.n	d6604 <__aeabi_dmul+0x134>
   d65cc:	f104 0414 	add.w	r4, r4, #20
   d65d0:	f1c4 0520 	rsb	r5, r4, #32
   d65d4:	fa00 f305 	lsl.w	r3, r0, r5
   d65d8:	fa20 f004 	lsr.w	r0, r0, r4
   d65dc:	fa01 f205 	lsl.w	r2, r1, r5
   d65e0:	ea40 0002 	orr.w	r0, r0, r2
   d65e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d65e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d65ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d65f0:	fa21 f604 	lsr.w	r6, r1, r4
   d65f4:	eb42 0106 	adc.w	r1, r2, r6
   d65f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d65fc:	bf08      	it	eq
   d65fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6602:	bd70      	pop	{r4, r5, r6, pc}
   d6604:	f1c4 040c 	rsb	r4, r4, #12
   d6608:	f1c4 0520 	rsb	r5, r4, #32
   d660c:	fa00 f304 	lsl.w	r3, r0, r4
   d6610:	fa20 f005 	lsr.w	r0, r0, r5
   d6614:	fa01 f204 	lsl.w	r2, r1, r4
   d6618:	ea40 0002 	orr.w	r0, r0, r2
   d661c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6624:	f141 0100 	adc.w	r1, r1, #0
   d6628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d662c:	bf08      	it	eq
   d662e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6632:	bd70      	pop	{r4, r5, r6, pc}
   d6634:	f1c4 0520 	rsb	r5, r4, #32
   d6638:	fa00 f205 	lsl.w	r2, r0, r5
   d663c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6640:	fa20 f304 	lsr.w	r3, r0, r4
   d6644:	fa01 f205 	lsl.w	r2, r1, r5
   d6648:	ea43 0302 	orr.w	r3, r3, r2
   d664c:	fa21 f004 	lsr.w	r0, r1, r4
   d6650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6654:	fa21 f204 	lsr.w	r2, r1, r4
   d6658:	ea20 0002 	bic.w	r0, r0, r2
   d665c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6664:	bf08      	it	eq
   d6666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d666a:	bd70      	pop	{r4, r5, r6, pc}
   d666c:	f094 0f00 	teq	r4, #0
   d6670:	d10f      	bne.n	d6692 <__aeabi_dmul+0x1c2>
   d6672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6676:	0040      	lsls	r0, r0, #1
   d6678:	eb41 0101 	adc.w	r1, r1, r1
   d667c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6680:	bf08      	it	eq
   d6682:	3c01      	subeq	r4, #1
   d6684:	d0f7      	beq.n	d6676 <__aeabi_dmul+0x1a6>
   d6686:	ea41 0106 	orr.w	r1, r1, r6
   d668a:	f095 0f00 	teq	r5, #0
   d668e:	bf18      	it	ne
   d6690:	4770      	bxne	lr
   d6692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6696:	0052      	lsls	r2, r2, #1
   d6698:	eb43 0303 	adc.w	r3, r3, r3
   d669c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d66a0:	bf08      	it	eq
   d66a2:	3d01      	subeq	r5, #1
   d66a4:	d0f7      	beq.n	d6696 <__aeabi_dmul+0x1c6>
   d66a6:	ea43 0306 	orr.w	r3, r3, r6
   d66aa:	4770      	bx	lr
   d66ac:	ea94 0f0c 	teq	r4, ip
   d66b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d66b4:	bf18      	it	ne
   d66b6:	ea95 0f0c 	teqne	r5, ip
   d66ba:	d00c      	beq.n	d66d6 <__aeabi_dmul+0x206>
   d66bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d66c0:	bf18      	it	ne
   d66c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d66c6:	d1d1      	bne.n	d666c <__aeabi_dmul+0x19c>
   d66c8:	ea81 0103 	eor.w	r1, r1, r3
   d66cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d66d0:	f04f 0000 	mov.w	r0, #0
   d66d4:	bd70      	pop	{r4, r5, r6, pc}
   d66d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d66da:	bf06      	itte	eq
   d66dc:	4610      	moveq	r0, r2
   d66de:	4619      	moveq	r1, r3
   d66e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d66e4:	d019      	beq.n	d671a <__aeabi_dmul+0x24a>
   d66e6:	ea94 0f0c 	teq	r4, ip
   d66ea:	d102      	bne.n	d66f2 <__aeabi_dmul+0x222>
   d66ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d66f0:	d113      	bne.n	d671a <__aeabi_dmul+0x24a>
   d66f2:	ea95 0f0c 	teq	r5, ip
   d66f6:	d105      	bne.n	d6704 <__aeabi_dmul+0x234>
   d66f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d66fc:	bf1c      	itt	ne
   d66fe:	4610      	movne	r0, r2
   d6700:	4619      	movne	r1, r3
   d6702:	d10a      	bne.n	d671a <__aeabi_dmul+0x24a>
   d6704:	ea81 0103 	eor.w	r1, r1, r3
   d6708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d670c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6714:	f04f 0000 	mov.w	r0, #0
   d6718:	bd70      	pop	{r4, r5, r6, pc}
   d671a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d671e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6722:	bd70      	pop	{r4, r5, r6, pc}

000d6724 <__aeabi_ddiv>:
   d6724:	b570      	push	{r4, r5, r6, lr}
   d6726:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d672a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d672e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6732:	bf1d      	ittte	ne
   d6734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6738:	ea94 0f0c 	teqne	r4, ip
   d673c:	ea95 0f0c 	teqne	r5, ip
   d6740:	f000 f8a7 	bleq	d6892 <__aeabi_ddiv+0x16e>
   d6744:	eba4 0405 	sub.w	r4, r4, r5
   d6748:	ea81 0e03 	eor.w	lr, r1, r3
   d674c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6750:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6754:	f000 8088 	beq.w	d6868 <__aeabi_ddiv+0x144>
   d6758:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d675c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6768:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d676c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6774:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d677c:	429d      	cmp	r5, r3
   d677e:	bf08      	it	eq
   d6780:	4296      	cmpeq	r6, r2
   d6782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6786:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d678a:	d202      	bcs.n	d6792 <__aeabi_ddiv+0x6e>
   d678c:	085b      	lsrs	r3, r3, #1
   d678e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6792:	1ab6      	subs	r6, r6, r2
   d6794:	eb65 0503 	sbc.w	r5, r5, r3
   d6798:	085b      	lsrs	r3, r3, #1
   d679a:	ea4f 0232 	mov.w	r2, r2, rrx
   d679e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d67a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d67a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d67aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d67ae:	bf22      	ittt	cs
   d67b0:	1ab6      	subcs	r6, r6, r2
   d67b2:	4675      	movcs	r5, lr
   d67b4:	ea40 000c 	orrcs.w	r0, r0, ip
   d67b8:	085b      	lsrs	r3, r3, #1
   d67ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d67be:	ebb6 0e02 	subs.w	lr, r6, r2
   d67c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d67c6:	bf22      	ittt	cs
   d67c8:	1ab6      	subcs	r6, r6, r2
   d67ca:	4675      	movcs	r5, lr
   d67cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d67d0:	085b      	lsrs	r3, r3, #1
   d67d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d67d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d67da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d67de:	bf22      	ittt	cs
   d67e0:	1ab6      	subcs	r6, r6, r2
   d67e2:	4675      	movcs	r5, lr
   d67e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d67e8:	085b      	lsrs	r3, r3, #1
   d67ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d67ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d67f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d67f6:	bf22      	ittt	cs
   d67f8:	1ab6      	subcs	r6, r6, r2
   d67fa:	4675      	movcs	r5, lr
   d67fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6800:	ea55 0e06 	orrs.w	lr, r5, r6
   d6804:	d018      	beq.n	d6838 <__aeabi_ddiv+0x114>
   d6806:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d680a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d680e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d681a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d681e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6822:	d1c0      	bne.n	d67a6 <__aeabi_ddiv+0x82>
   d6824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6828:	d10b      	bne.n	d6842 <__aeabi_ddiv+0x11e>
   d682a:	ea41 0100 	orr.w	r1, r1, r0
   d682e:	f04f 0000 	mov.w	r0, #0
   d6832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6836:	e7b6      	b.n	d67a6 <__aeabi_ddiv+0x82>
   d6838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d683c:	bf04      	itt	eq
   d683e:	4301      	orreq	r1, r0
   d6840:	2000      	moveq	r0, #0
   d6842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6846:	bf88      	it	hi
   d6848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d684c:	f63f aeaf 	bhi.w	d65ae <__aeabi_dmul+0xde>
   d6850:	ebb5 0c03 	subs.w	ip, r5, r3
   d6854:	bf04      	itt	eq
   d6856:	ebb6 0c02 	subseq.w	ip, r6, r2
   d685a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d685e:	f150 0000 	adcs.w	r0, r0, #0
   d6862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6866:	bd70      	pop	{r4, r5, r6, pc}
   d6868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d686c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6874:	bfc2      	ittt	gt
   d6876:	ebd4 050c 	rsbsgt	r5, r4, ip
   d687a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d687e:	bd70      	popgt	{r4, r5, r6, pc}
   d6880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6884:	f04f 0e00 	mov.w	lr, #0
   d6888:	3c01      	subs	r4, #1
   d688a:	e690      	b.n	d65ae <__aeabi_dmul+0xde>
   d688c:	ea45 0e06 	orr.w	lr, r5, r6
   d6890:	e68d      	b.n	d65ae <__aeabi_dmul+0xde>
   d6892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6896:	ea94 0f0c 	teq	r4, ip
   d689a:	bf08      	it	eq
   d689c:	ea95 0f0c 	teqeq	r5, ip
   d68a0:	f43f af3b 	beq.w	d671a <__aeabi_dmul+0x24a>
   d68a4:	ea94 0f0c 	teq	r4, ip
   d68a8:	d10a      	bne.n	d68c0 <__aeabi_ddiv+0x19c>
   d68aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d68ae:	f47f af34 	bne.w	d671a <__aeabi_dmul+0x24a>
   d68b2:	ea95 0f0c 	teq	r5, ip
   d68b6:	f47f af25 	bne.w	d6704 <__aeabi_dmul+0x234>
   d68ba:	4610      	mov	r0, r2
   d68bc:	4619      	mov	r1, r3
   d68be:	e72c      	b.n	d671a <__aeabi_dmul+0x24a>
   d68c0:	ea95 0f0c 	teq	r5, ip
   d68c4:	d106      	bne.n	d68d4 <__aeabi_ddiv+0x1b0>
   d68c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d68ca:	f43f aefd 	beq.w	d66c8 <__aeabi_dmul+0x1f8>
   d68ce:	4610      	mov	r0, r2
   d68d0:	4619      	mov	r1, r3
   d68d2:	e722      	b.n	d671a <__aeabi_dmul+0x24a>
   d68d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d68d8:	bf18      	it	ne
   d68da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d68de:	f47f aec5 	bne.w	d666c <__aeabi_dmul+0x19c>
   d68e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d68e6:	f47f af0d 	bne.w	d6704 <__aeabi_dmul+0x234>
   d68ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d68ee:	f47f aeeb 	bne.w	d66c8 <__aeabi_dmul+0x1f8>
   d68f2:	e712      	b.n	d671a <__aeabi_dmul+0x24a>

000d68f4 <__gedf2>:
   d68f4:	f04f 3cff 	mov.w	ip, #4294967295
   d68f8:	e006      	b.n	d6908 <__cmpdf2+0x4>
   d68fa:	bf00      	nop

000d68fc <__ledf2>:
   d68fc:	f04f 0c01 	mov.w	ip, #1
   d6900:	e002      	b.n	d6908 <__cmpdf2+0x4>
   d6902:	bf00      	nop

000d6904 <__cmpdf2>:
   d6904:	f04f 0c01 	mov.w	ip, #1
   d6908:	f84d cd04 	str.w	ip, [sp, #-4]!
   d690c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6918:	bf18      	it	ne
   d691a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d691e:	d01b      	beq.n	d6958 <__cmpdf2+0x54>
   d6920:	b001      	add	sp, #4
   d6922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6926:	bf0c      	ite	eq
   d6928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d692c:	ea91 0f03 	teqne	r1, r3
   d6930:	bf02      	ittt	eq
   d6932:	ea90 0f02 	teqeq	r0, r2
   d6936:	2000      	moveq	r0, #0
   d6938:	4770      	bxeq	lr
   d693a:	f110 0f00 	cmn.w	r0, #0
   d693e:	ea91 0f03 	teq	r1, r3
   d6942:	bf58      	it	pl
   d6944:	4299      	cmppl	r1, r3
   d6946:	bf08      	it	eq
   d6948:	4290      	cmpeq	r0, r2
   d694a:	bf2c      	ite	cs
   d694c:	17d8      	asrcs	r0, r3, #31
   d694e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6952:	f040 0001 	orr.w	r0, r0, #1
   d6956:	4770      	bx	lr
   d6958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d695c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6960:	d102      	bne.n	d6968 <__cmpdf2+0x64>
   d6962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6966:	d107      	bne.n	d6978 <__cmpdf2+0x74>
   d6968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d696c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6970:	d1d6      	bne.n	d6920 <__cmpdf2+0x1c>
   d6972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6976:	d0d3      	beq.n	d6920 <__cmpdf2+0x1c>
   d6978:	f85d 0b04 	ldr.w	r0, [sp], #4
   d697c:	4770      	bx	lr
   d697e:	bf00      	nop

000d6980 <__aeabi_cdrcmple>:
   d6980:	4684      	mov	ip, r0
   d6982:	4610      	mov	r0, r2
   d6984:	4662      	mov	r2, ip
   d6986:	468c      	mov	ip, r1
   d6988:	4619      	mov	r1, r3
   d698a:	4663      	mov	r3, ip
   d698c:	e000      	b.n	d6990 <__aeabi_cdcmpeq>
   d698e:	bf00      	nop

000d6990 <__aeabi_cdcmpeq>:
   d6990:	b501      	push	{r0, lr}
   d6992:	f7ff ffb7 	bl	d6904 <__cmpdf2>
   d6996:	2800      	cmp	r0, #0
   d6998:	bf48      	it	mi
   d699a:	f110 0f00 	cmnmi.w	r0, #0
   d699e:	bd01      	pop	{r0, pc}

000d69a0 <__aeabi_dcmpeq>:
   d69a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69a4:	f7ff fff4 	bl	d6990 <__aeabi_cdcmpeq>
   d69a8:	bf0c      	ite	eq
   d69aa:	2001      	moveq	r0, #1
   d69ac:	2000      	movne	r0, #0
   d69ae:	f85d fb08 	ldr.w	pc, [sp], #8
   d69b2:	bf00      	nop

000d69b4 <__aeabi_dcmplt>:
   d69b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69b8:	f7ff ffea 	bl	d6990 <__aeabi_cdcmpeq>
   d69bc:	bf34      	ite	cc
   d69be:	2001      	movcc	r0, #1
   d69c0:	2000      	movcs	r0, #0
   d69c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d69c6:	bf00      	nop

000d69c8 <__aeabi_dcmple>:
   d69c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69cc:	f7ff ffe0 	bl	d6990 <__aeabi_cdcmpeq>
   d69d0:	bf94      	ite	ls
   d69d2:	2001      	movls	r0, #1
   d69d4:	2000      	movhi	r0, #0
   d69d6:	f85d fb08 	ldr.w	pc, [sp], #8
   d69da:	bf00      	nop

000d69dc <__aeabi_dcmpge>:
   d69dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69e0:	f7ff ffce 	bl	d6980 <__aeabi_cdrcmple>
   d69e4:	bf94      	ite	ls
   d69e6:	2001      	movls	r0, #1
   d69e8:	2000      	movhi	r0, #0
   d69ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d69ee:	bf00      	nop

000d69f0 <__aeabi_dcmpgt>:
   d69f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d69f4:	f7ff ffc4 	bl	d6980 <__aeabi_cdrcmple>
   d69f8:	bf34      	ite	cc
   d69fa:	2001      	movcc	r0, #1
   d69fc:	2000      	movcs	r0, #0
   d69fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d6a02:	bf00      	nop

000d6a04 <__aeabi_dcmpun>:
   d6a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a0c:	d102      	bne.n	d6a14 <__aeabi_dcmpun+0x10>
   d6a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6a12:	d10a      	bne.n	d6a2a <__aeabi_dcmpun+0x26>
   d6a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6a1c:	d102      	bne.n	d6a24 <__aeabi_dcmpun+0x20>
   d6a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6a22:	d102      	bne.n	d6a2a <__aeabi_dcmpun+0x26>
   d6a24:	f04f 0000 	mov.w	r0, #0
   d6a28:	4770      	bx	lr
   d6a2a:	f04f 0001 	mov.w	r0, #1
   d6a2e:	4770      	bx	lr

000d6a30 <__aeabi_d2uiz>:
   d6a30:	004a      	lsls	r2, r1, #1
   d6a32:	d211      	bcs.n	d6a58 <__aeabi_d2uiz+0x28>
   d6a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6a38:	d211      	bcs.n	d6a5e <__aeabi_d2uiz+0x2e>
   d6a3a:	d50d      	bpl.n	d6a58 <__aeabi_d2uiz+0x28>
   d6a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6a44:	d40e      	bmi.n	d6a64 <__aeabi_d2uiz+0x34>
   d6a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6a52:	fa23 f002 	lsr.w	r0, r3, r2
   d6a56:	4770      	bx	lr
   d6a58:	f04f 0000 	mov.w	r0, #0
   d6a5c:	4770      	bx	lr
   d6a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6a62:	d102      	bne.n	d6a6a <__aeabi_d2uiz+0x3a>
   d6a64:	f04f 30ff 	mov.w	r0, #4294967295
   d6a68:	4770      	bx	lr
   d6a6a:	f04f 0000 	mov.w	r0, #0
   d6a6e:	4770      	bx	lr

000d6a70 <__aeabi_uldivmod>:
   d6a70:	b953      	cbnz	r3, d6a88 <__aeabi_uldivmod+0x18>
   d6a72:	b94a      	cbnz	r2, d6a88 <__aeabi_uldivmod+0x18>
   d6a74:	2900      	cmp	r1, #0
   d6a76:	bf08      	it	eq
   d6a78:	2800      	cmpeq	r0, #0
   d6a7a:	bf1c      	itt	ne
   d6a7c:	f04f 31ff 	movne.w	r1, #4294967295
   d6a80:	f04f 30ff 	movne.w	r0, #4294967295
   d6a84:	f000 b9a2 	b.w	d6dcc <__aeabi_idiv0>
   d6a88:	f1ad 0c08 	sub.w	ip, sp, #8
   d6a8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6a90:	f000 f82a 	bl	d6ae8 <__udivmoddi4>
   d6a94:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6a9c:	b004      	add	sp, #16
   d6a9e:	4770      	bx	lr

000d6aa0 <__aeabi_d2ulz>:
   d6aa0:	b5d0      	push	{r4, r6, r7, lr}
   d6aa2:	2200      	movs	r2, #0
   d6aa4:	4b0e      	ldr	r3, [pc, #56]	; (d6ae0 <__aeabi_d2ulz+0x40>)
   d6aa6:	4606      	mov	r6, r0
   d6aa8:	460f      	mov	r7, r1
   d6aaa:	f7ff fd11 	bl	d64d0 <__aeabi_dmul>
   d6aae:	f7ff ffbf 	bl	d6a30 <__aeabi_d2uiz>
   d6ab2:	4604      	mov	r4, r0
   d6ab4:	f7ff fc96 	bl	d63e4 <__aeabi_ui2d>
   d6ab8:	2200      	movs	r2, #0
   d6aba:	4b0a      	ldr	r3, [pc, #40]	; (d6ae4 <__aeabi_d2ulz+0x44>)
   d6abc:	f7ff fd08 	bl	d64d0 <__aeabi_dmul>
   d6ac0:	4602      	mov	r2, r0
   d6ac2:	460b      	mov	r3, r1
   d6ac4:	4630      	mov	r0, r6
   d6ac6:	4639      	mov	r1, r7
   d6ac8:	f7ff fb4e 	bl	d6168 <__aeabi_dsub>
   d6acc:	f7ff ffb0 	bl	d6a30 <__aeabi_d2uiz>
   d6ad0:	4623      	mov	r3, r4
   d6ad2:	2200      	movs	r2, #0
   d6ad4:	ea42 0200 	orr.w	r2, r2, r0
   d6ad8:	4610      	mov	r0, r2
   d6ada:	4619      	mov	r1, r3
   d6adc:	bdd0      	pop	{r4, r6, r7, pc}
   d6ade:	bf00      	nop
   d6ae0:	3df00000 	.word	0x3df00000
   d6ae4:	41f00000 	.word	0x41f00000

000d6ae8 <__udivmoddi4>:
   d6ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6aec:	468c      	mov	ip, r1
   d6aee:	460e      	mov	r6, r1
   d6af0:	4604      	mov	r4, r0
   d6af2:	9d08      	ldr	r5, [sp, #32]
   d6af4:	2b00      	cmp	r3, #0
   d6af6:	d150      	bne.n	d6b9a <__udivmoddi4+0xb2>
   d6af8:	428a      	cmp	r2, r1
   d6afa:	4617      	mov	r7, r2
   d6afc:	d96c      	bls.n	d6bd8 <__udivmoddi4+0xf0>
   d6afe:	fab2 fe82 	clz	lr, r2
   d6b02:	f1be 0f00 	cmp.w	lr, #0
   d6b06:	d00b      	beq.n	d6b20 <__udivmoddi4+0x38>
   d6b08:	f1ce 0420 	rsb	r4, lr, #32
   d6b0c:	fa20 f404 	lsr.w	r4, r0, r4
   d6b10:	fa01 f60e 	lsl.w	r6, r1, lr
   d6b14:	ea44 0c06 	orr.w	ip, r4, r6
   d6b18:	fa02 f70e 	lsl.w	r7, r2, lr
   d6b1c:	fa00 f40e 	lsl.w	r4, r0, lr
   d6b20:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d6b24:	0c22      	lsrs	r2, r4, #16
   d6b26:	fbbc f0f9 	udiv	r0, ip, r9
   d6b2a:	fa1f f887 	uxth.w	r8, r7
   d6b2e:	fb09 c610 	mls	r6, r9, r0, ip
   d6b32:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6b36:	fb00 f308 	mul.w	r3, r0, r8
   d6b3a:	42b3      	cmp	r3, r6
   d6b3c:	d909      	bls.n	d6b52 <__udivmoddi4+0x6a>
   d6b3e:	19f6      	adds	r6, r6, r7
   d6b40:	f100 32ff 	add.w	r2, r0, #4294967295
   d6b44:	f080 8122 	bcs.w	d6d8c <__udivmoddi4+0x2a4>
   d6b48:	42b3      	cmp	r3, r6
   d6b4a:	f240 811f 	bls.w	d6d8c <__udivmoddi4+0x2a4>
   d6b4e:	3802      	subs	r0, #2
   d6b50:	443e      	add	r6, r7
   d6b52:	1af6      	subs	r6, r6, r3
   d6b54:	b2a2      	uxth	r2, r4
   d6b56:	fbb6 f3f9 	udiv	r3, r6, r9
   d6b5a:	fb09 6613 	mls	r6, r9, r3, r6
   d6b5e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6b62:	fb03 f808 	mul.w	r8, r3, r8
   d6b66:	45a0      	cmp	r8, r4
   d6b68:	d909      	bls.n	d6b7e <__udivmoddi4+0x96>
   d6b6a:	19e4      	adds	r4, r4, r7
   d6b6c:	f103 32ff 	add.w	r2, r3, #4294967295
   d6b70:	f080 810a 	bcs.w	d6d88 <__udivmoddi4+0x2a0>
   d6b74:	45a0      	cmp	r8, r4
   d6b76:	f240 8107 	bls.w	d6d88 <__udivmoddi4+0x2a0>
   d6b7a:	3b02      	subs	r3, #2
   d6b7c:	443c      	add	r4, r7
   d6b7e:	ebc8 0404 	rsb	r4, r8, r4
   d6b82:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6b86:	2100      	movs	r1, #0
   d6b88:	2d00      	cmp	r5, #0
   d6b8a:	d062      	beq.n	d6c52 <__udivmoddi4+0x16a>
   d6b8c:	fa24 f40e 	lsr.w	r4, r4, lr
   d6b90:	2300      	movs	r3, #0
   d6b92:	602c      	str	r4, [r5, #0]
   d6b94:	606b      	str	r3, [r5, #4]
   d6b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b9a:	428b      	cmp	r3, r1
   d6b9c:	d907      	bls.n	d6bae <__udivmoddi4+0xc6>
   d6b9e:	2d00      	cmp	r5, #0
   d6ba0:	d055      	beq.n	d6c4e <__udivmoddi4+0x166>
   d6ba2:	2100      	movs	r1, #0
   d6ba4:	e885 0041 	stmia.w	r5, {r0, r6}
   d6ba8:	4608      	mov	r0, r1
   d6baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bae:	fab3 f183 	clz	r1, r3
   d6bb2:	2900      	cmp	r1, #0
   d6bb4:	f040 8090 	bne.w	d6cd8 <__udivmoddi4+0x1f0>
   d6bb8:	42b3      	cmp	r3, r6
   d6bba:	d302      	bcc.n	d6bc2 <__udivmoddi4+0xda>
   d6bbc:	4282      	cmp	r2, r0
   d6bbe:	f200 80f8 	bhi.w	d6db2 <__udivmoddi4+0x2ca>
   d6bc2:	1a84      	subs	r4, r0, r2
   d6bc4:	eb66 0603 	sbc.w	r6, r6, r3
   d6bc8:	2001      	movs	r0, #1
   d6bca:	46b4      	mov	ip, r6
   d6bcc:	2d00      	cmp	r5, #0
   d6bce:	d040      	beq.n	d6c52 <__udivmoddi4+0x16a>
   d6bd0:	e885 1010 	stmia.w	r5, {r4, ip}
   d6bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6bd8:	b912      	cbnz	r2, d6be0 <__udivmoddi4+0xf8>
   d6bda:	2701      	movs	r7, #1
   d6bdc:	fbb7 f7f2 	udiv	r7, r7, r2
   d6be0:	fab7 fe87 	clz	lr, r7
   d6be4:	f1be 0f00 	cmp.w	lr, #0
   d6be8:	d135      	bne.n	d6c56 <__udivmoddi4+0x16e>
   d6bea:	1bf3      	subs	r3, r6, r7
   d6bec:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6bf0:	fa1f fc87 	uxth.w	ip, r7
   d6bf4:	2101      	movs	r1, #1
   d6bf6:	fbb3 f0f8 	udiv	r0, r3, r8
   d6bfa:	0c22      	lsrs	r2, r4, #16
   d6bfc:	fb08 3610 	mls	r6, r8, r0, r3
   d6c00:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d6c04:	fb0c f300 	mul.w	r3, ip, r0
   d6c08:	42b3      	cmp	r3, r6
   d6c0a:	d907      	bls.n	d6c1c <__udivmoddi4+0x134>
   d6c0c:	19f6      	adds	r6, r6, r7
   d6c0e:	f100 32ff 	add.w	r2, r0, #4294967295
   d6c12:	d202      	bcs.n	d6c1a <__udivmoddi4+0x132>
   d6c14:	42b3      	cmp	r3, r6
   d6c16:	f200 80ce 	bhi.w	d6db6 <__udivmoddi4+0x2ce>
   d6c1a:	4610      	mov	r0, r2
   d6c1c:	1af6      	subs	r6, r6, r3
   d6c1e:	b2a2      	uxth	r2, r4
   d6c20:	fbb6 f3f8 	udiv	r3, r6, r8
   d6c24:	fb08 6613 	mls	r6, r8, r3, r6
   d6c28:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d6c2c:	fb0c fc03 	mul.w	ip, ip, r3
   d6c30:	45a4      	cmp	ip, r4
   d6c32:	d907      	bls.n	d6c44 <__udivmoddi4+0x15c>
   d6c34:	19e4      	adds	r4, r4, r7
   d6c36:	f103 32ff 	add.w	r2, r3, #4294967295
   d6c3a:	d202      	bcs.n	d6c42 <__udivmoddi4+0x15a>
   d6c3c:	45a4      	cmp	ip, r4
   d6c3e:	f200 80b5 	bhi.w	d6dac <__udivmoddi4+0x2c4>
   d6c42:	4613      	mov	r3, r2
   d6c44:	ebcc 0404 	rsb	r4, ip, r4
   d6c48:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d6c4c:	e79c      	b.n	d6b88 <__udivmoddi4+0xa0>
   d6c4e:	4629      	mov	r1, r5
   d6c50:	4628      	mov	r0, r5
   d6c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c56:	f1ce 0120 	rsb	r1, lr, #32
   d6c5a:	fa06 f30e 	lsl.w	r3, r6, lr
   d6c5e:	fa07 f70e 	lsl.w	r7, r7, lr
   d6c62:	fa20 f901 	lsr.w	r9, r0, r1
   d6c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d6c6a:	40ce      	lsrs	r6, r1
   d6c6c:	ea49 0903 	orr.w	r9, r9, r3
   d6c70:	fbb6 faf8 	udiv	sl, r6, r8
   d6c74:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d6c78:	fb08 661a 	mls	r6, r8, sl, r6
   d6c7c:	fa1f fc87 	uxth.w	ip, r7
   d6c80:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d6c84:	fb0a f20c 	mul.w	r2, sl, ip
   d6c88:	429a      	cmp	r2, r3
   d6c8a:	fa00 f40e 	lsl.w	r4, r0, lr
   d6c8e:	d90a      	bls.n	d6ca6 <__udivmoddi4+0x1be>
   d6c90:	19db      	adds	r3, r3, r7
   d6c92:	f10a 31ff 	add.w	r1, sl, #4294967295
   d6c96:	f080 8087 	bcs.w	d6da8 <__udivmoddi4+0x2c0>
   d6c9a:	429a      	cmp	r2, r3
   d6c9c:	f240 8084 	bls.w	d6da8 <__udivmoddi4+0x2c0>
   d6ca0:	f1aa 0a02 	sub.w	sl, sl, #2
   d6ca4:	443b      	add	r3, r7
   d6ca6:	1a9b      	subs	r3, r3, r2
   d6ca8:	fa1f f989 	uxth.w	r9, r9
   d6cac:	fbb3 f1f8 	udiv	r1, r3, r8
   d6cb0:	fb08 3311 	mls	r3, r8, r1, r3
   d6cb4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d6cb8:	fb01 f60c 	mul.w	r6, r1, ip
   d6cbc:	429e      	cmp	r6, r3
   d6cbe:	d907      	bls.n	d6cd0 <__udivmoddi4+0x1e8>
   d6cc0:	19db      	adds	r3, r3, r7
   d6cc2:	f101 32ff 	add.w	r2, r1, #4294967295
   d6cc6:	d26b      	bcs.n	d6da0 <__udivmoddi4+0x2b8>
   d6cc8:	429e      	cmp	r6, r3
   d6cca:	d969      	bls.n	d6da0 <__udivmoddi4+0x2b8>
   d6ccc:	3902      	subs	r1, #2
   d6cce:	443b      	add	r3, r7
   d6cd0:	1b9b      	subs	r3, r3, r6
   d6cd2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d6cd6:	e78e      	b.n	d6bf6 <__udivmoddi4+0x10e>
   d6cd8:	f1c1 0e20 	rsb	lr, r1, #32
   d6cdc:	fa22 f40e 	lsr.w	r4, r2, lr
   d6ce0:	408b      	lsls	r3, r1
   d6ce2:	4323      	orrs	r3, r4
   d6ce4:	fa20 f70e 	lsr.w	r7, r0, lr
   d6ce8:	fa06 f401 	lsl.w	r4, r6, r1
   d6cec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d6cf0:	fa26 f60e 	lsr.w	r6, r6, lr
   d6cf4:	433c      	orrs	r4, r7
   d6cf6:	fbb6 f9fc 	udiv	r9, r6, ip
   d6cfa:	0c27      	lsrs	r7, r4, #16
   d6cfc:	fb0c 6619 	mls	r6, ip, r9, r6
   d6d00:	fa1f f883 	uxth.w	r8, r3
   d6d04:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d6d08:	fb09 f708 	mul.w	r7, r9, r8
   d6d0c:	42b7      	cmp	r7, r6
   d6d0e:	fa02 f201 	lsl.w	r2, r2, r1
   d6d12:	fa00 fa01 	lsl.w	sl, r0, r1
   d6d16:	d908      	bls.n	d6d2a <__udivmoddi4+0x242>
   d6d18:	18f6      	adds	r6, r6, r3
   d6d1a:	f109 30ff 	add.w	r0, r9, #4294967295
   d6d1e:	d241      	bcs.n	d6da4 <__udivmoddi4+0x2bc>
   d6d20:	42b7      	cmp	r7, r6
   d6d22:	d93f      	bls.n	d6da4 <__udivmoddi4+0x2bc>
   d6d24:	f1a9 0902 	sub.w	r9, r9, #2
   d6d28:	441e      	add	r6, r3
   d6d2a:	1bf6      	subs	r6, r6, r7
   d6d2c:	b2a0      	uxth	r0, r4
   d6d2e:	fbb6 f4fc 	udiv	r4, r6, ip
   d6d32:	fb0c 6614 	mls	r6, ip, r4, r6
   d6d36:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d6d3a:	fb04 f808 	mul.w	r8, r4, r8
   d6d3e:	45b8      	cmp	r8, r7
   d6d40:	d907      	bls.n	d6d52 <__udivmoddi4+0x26a>
   d6d42:	18ff      	adds	r7, r7, r3
   d6d44:	f104 30ff 	add.w	r0, r4, #4294967295
   d6d48:	d228      	bcs.n	d6d9c <__udivmoddi4+0x2b4>
   d6d4a:	45b8      	cmp	r8, r7
   d6d4c:	d926      	bls.n	d6d9c <__udivmoddi4+0x2b4>
   d6d4e:	3c02      	subs	r4, #2
   d6d50:	441f      	add	r7, r3
   d6d52:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d6d56:	ebc8 0707 	rsb	r7, r8, r7
   d6d5a:	fba0 8902 	umull	r8, r9, r0, r2
   d6d5e:	454f      	cmp	r7, r9
   d6d60:	4644      	mov	r4, r8
   d6d62:	464e      	mov	r6, r9
   d6d64:	d314      	bcc.n	d6d90 <__udivmoddi4+0x2a8>
   d6d66:	d029      	beq.n	d6dbc <__udivmoddi4+0x2d4>
   d6d68:	b365      	cbz	r5, d6dc4 <__udivmoddi4+0x2dc>
   d6d6a:	ebba 0304 	subs.w	r3, sl, r4
   d6d6e:	eb67 0706 	sbc.w	r7, r7, r6
   d6d72:	fa07 fe0e 	lsl.w	lr, r7, lr
   d6d76:	40cb      	lsrs	r3, r1
   d6d78:	40cf      	lsrs	r7, r1
   d6d7a:	ea4e 0303 	orr.w	r3, lr, r3
   d6d7e:	e885 0088 	stmia.w	r5, {r3, r7}
   d6d82:	2100      	movs	r1, #0
   d6d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6d88:	4613      	mov	r3, r2
   d6d8a:	e6f8      	b.n	d6b7e <__udivmoddi4+0x96>
   d6d8c:	4610      	mov	r0, r2
   d6d8e:	e6e0      	b.n	d6b52 <__udivmoddi4+0x6a>
   d6d90:	ebb8 0402 	subs.w	r4, r8, r2
   d6d94:	eb69 0603 	sbc.w	r6, r9, r3
   d6d98:	3801      	subs	r0, #1
   d6d9a:	e7e5      	b.n	d6d68 <__udivmoddi4+0x280>
   d6d9c:	4604      	mov	r4, r0
   d6d9e:	e7d8      	b.n	d6d52 <__udivmoddi4+0x26a>
   d6da0:	4611      	mov	r1, r2
   d6da2:	e795      	b.n	d6cd0 <__udivmoddi4+0x1e8>
   d6da4:	4681      	mov	r9, r0
   d6da6:	e7c0      	b.n	d6d2a <__udivmoddi4+0x242>
   d6da8:	468a      	mov	sl, r1
   d6daa:	e77c      	b.n	d6ca6 <__udivmoddi4+0x1be>
   d6dac:	3b02      	subs	r3, #2
   d6dae:	443c      	add	r4, r7
   d6db0:	e748      	b.n	d6c44 <__udivmoddi4+0x15c>
   d6db2:	4608      	mov	r0, r1
   d6db4:	e70a      	b.n	d6bcc <__udivmoddi4+0xe4>
   d6db6:	3802      	subs	r0, #2
   d6db8:	443e      	add	r6, r7
   d6dba:	e72f      	b.n	d6c1c <__udivmoddi4+0x134>
   d6dbc:	45c2      	cmp	sl, r8
   d6dbe:	d3e7      	bcc.n	d6d90 <__udivmoddi4+0x2a8>
   d6dc0:	463e      	mov	r6, r7
   d6dc2:	e7d1      	b.n	d6d68 <__udivmoddi4+0x280>
   d6dc4:	4629      	mov	r1, r5
   d6dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6dca:	bf00      	nop

000d6dcc <__aeabi_idiv0>:
   d6dcc:	4770      	bx	lr
   d6dce:	bf00      	nop

000d6dd0 <__cxa_atexit>:
   d6dd0:	b510      	push	{r4, lr}
   d6dd2:	4c05      	ldr	r4, [pc, #20]	; (d6de8 <__cxa_atexit+0x18>)
   d6dd4:	4613      	mov	r3, r2
   d6dd6:	b12c      	cbz	r4, d6de4 <__cxa_atexit+0x14>
   d6dd8:	460a      	mov	r2, r1
   d6dda:	4601      	mov	r1, r0
   d6ddc:	2002      	movs	r0, #2
   d6dde:	f3af 8000 	nop.w
   d6de2:	bd10      	pop	{r4, pc}
   d6de4:	4620      	mov	r0, r4
   d6de6:	bd10      	pop	{r4, pc}
   d6de8:	00000000 	.word	0x00000000

000d6dec <memcpy>:
   d6dec:	b510      	push	{r4, lr}
   d6dee:	1e43      	subs	r3, r0, #1
   d6df0:	440a      	add	r2, r1
   d6df2:	4291      	cmp	r1, r2
   d6df4:	d004      	beq.n	d6e00 <memcpy+0x14>
   d6df6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6dfe:	e7f8      	b.n	d6df2 <memcpy+0x6>
   d6e00:	bd10      	pop	{r4, pc}

000d6e02 <memset>:
   d6e02:	4402      	add	r2, r0
   d6e04:	4603      	mov	r3, r0
   d6e06:	4293      	cmp	r3, r2
   d6e08:	d002      	beq.n	d6e10 <memset+0xe>
   d6e0a:	f803 1b01 	strb.w	r1, [r3], #1
   d6e0e:	e7fa      	b.n	d6e06 <memset+0x4>
   d6e10:	4770      	bx	lr
	...

000d6e14 <srand>:
   d6e14:	b538      	push	{r3, r4, r5, lr}
   d6e16:	4b12      	ldr	r3, [pc, #72]	; (d6e60 <srand+0x4c>)
   d6e18:	681c      	ldr	r4, [r3, #0]
   d6e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e1c:	4605      	mov	r5, r0
   d6e1e:	b9d3      	cbnz	r3, d6e56 <srand+0x42>
   d6e20:	2018      	movs	r0, #24
   d6e22:	f7fd fc39 	bl	d4698 <malloc>
   d6e26:	f243 330e 	movw	r3, #13070	; 0x330e
   d6e2a:	63a0      	str	r0, [r4, #56]	; 0x38
   d6e2c:	8003      	strh	r3, [r0, #0]
   d6e2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6e32:	8043      	strh	r3, [r0, #2]
   d6e34:	f241 2334 	movw	r3, #4660	; 0x1234
   d6e38:	8083      	strh	r3, [r0, #4]
   d6e3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e3e:	80c3      	strh	r3, [r0, #6]
   d6e40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6e44:	8103      	strh	r3, [r0, #8]
   d6e46:	2305      	movs	r3, #5
   d6e48:	8143      	strh	r3, [r0, #10]
   d6e4a:	230b      	movs	r3, #11
   d6e4c:	8183      	strh	r3, [r0, #12]
   d6e4e:	2201      	movs	r2, #1
   d6e50:	2300      	movs	r3, #0
   d6e52:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e58:	2200      	movs	r2, #0
   d6e5a:	611d      	str	r5, [r3, #16]
   d6e5c:	615a      	str	r2, [r3, #20]
   d6e5e:	bd38      	pop	{r3, r4, r5, pc}
   d6e60:	2003e3bc 	.word	0x2003e3bc

000d6e64 <strdup>:
   d6e64:	4b02      	ldr	r3, [pc, #8]	; (d6e70 <strdup+0xc>)
   d6e66:	4601      	mov	r1, r0
   d6e68:	6818      	ldr	r0, [r3, #0]
   d6e6a:	f000 b803 	b.w	d6e74 <_strdup_r>
   d6e6e:	bf00      	nop
   d6e70:	2003e3bc 	.word	0x2003e3bc

000d6e74 <_strdup_r>:
   d6e74:	b570      	push	{r4, r5, r6, lr}
   d6e76:	4606      	mov	r6, r0
   d6e78:	4608      	mov	r0, r1
   d6e7a:	460c      	mov	r4, r1
   d6e7c:	f000 f80d 	bl	d6e9a <strlen>
   d6e80:	1c45      	adds	r5, r0, #1
   d6e82:	4629      	mov	r1, r5
   d6e84:	4630      	mov	r0, r6
   d6e86:	f7fd fc27 	bl	d46d8 <_malloc_r>
   d6e8a:	4606      	mov	r6, r0
   d6e8c:	b118      	cbz	r0, d6e96 <_strdup_r+0x22>
   d6e8e:	462a      	mov	r2, r5
   d6e90:	4621      	mov	r1, r4
   d6e92:	f7ff ffab 	bl	d6dec <memcpy>
   d6e96:	4630      	mov	r0, r6
   d6e98:	bd70      	pop	{r4, r5, r6, pc}

000d6e9a <strlen>:
   d6e9a:	4603      	mov	r3, r0
   d6e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6ea0:	2a00      	cmp	r2, #0
   d6ea2:	d1fb      	bne.n	d6e9c <strlen+0x2>
   d6ea4:	1a18      	subs	r0, r3, r0
   d6ea6:	3801      	subs	r0, #1
   d6ea8:	4770      	bx	lr

000d6eaa <link_code_end>:
	...

000d6eac <dynalib_user>:
   d6eac:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6ebc:	0000 0000 6554 706d 7265 7461 7275 2065     ....Temperature 
   d6ecc:	6e69 4320 6c65 6973 7375 203a 5400 6d65     in Celsius: .Tem
   d6edc:	6570 6172 7574 6572 6920 206e 6146 7268     perature in Fahr
   d6eec:	6e65 6568 7469 203a 6300 6c65 6973 7375     enheit: .celsius
   d6efc:	6600 6861 6572 686e 6965 0074               .fahrenheit.

000d6f08 <_ZTVN5spark12NetworkClassE>:
	...
   d6f10:	470b 000d 4715 000d 471f 000d 4729 000d     .G...G...G..)G..
   d6f20:	4733 000d 473f 000d 474b 000d 4757 000d     3G..?G..KG..WG..
   d6f30:	475f 000d 4769 000d 4773 000d               _G..iG..sG..

000d6f3c <_ZTVN5spark9WiFiClassE>:
	...
   d6f44:	48b3 000d 48a9 000d 489f 000d 4855 000d     .H...H...H..UH..
   d6f54:	4893 000d 4887 000d 487b 000d 4873 000d     .H...H..{H..sH..
   d6f64:	4869 000d 485f 000d 4773 000d               iH.._H..sG..

000d6f70 <_ZTVN5spark9MeshClassE>:
	...
   d6f78:	492f 000d 4925 000d 491b 000d 4911 000d     /I..%I...I...I..
   d6f88:	4905 000d 48f9 000d 48ed 000d 48e5 000d     .I...H...H...H..
   d6f98:	48db 000d 48d1 000d 4773 000d               .H...H..sG..

000d6fa4 <_ZTV7TwoWire>:
	...
   d6fac:	4a5d 000d 4aa7 000d 4a7f 000d 4a5f 000d     ]J...J...J.._J..
   d6fbc:	4a87 000d 4a8f 000d 4a97 000d 4a9f 000d     .J...J...J...J..

000d6fcc <_ZTV9USBSerial>:
	...
   d6fd4:	4af3 000d 4b43 000d 4b51 000d 53b5 000d     .J..CK..QK...S..
   d6fe4:	4b2f 000d 4af5 000d 4b0b 000d 4b3d 000d     /K...J...K..=K..
   d6ff4:	4b21 000d 4aef 000d                         !K...J..

000d6ffc <_ZTV9IPAddress>:
	...
   d7004:	4c11 000d 4c01 000d 4c03 000d               .L...L...L..

000d7010 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7018:	4ce5 000d 4ceb 000d 4d2f 000d 4cf9 000d     .L...L../M...L..
   d7028:	4ce7 000d 005a 2b25 3330 3a64 3025 7532     .L..Z.%+03d:%02u
   d7038:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d7048:	5325 7a25 6100 6373 6974 656d 6200 7561     %S%z.asctime.bau
   d7058:	0064 6553 6972 6c61 5300 7265 6169 316c     d.Serial.Serial1
   d7068:	7400 7079 0065 6170 6172 006d 6d63 0064     .type.param.cmd.
   d7078:	6469 6800 646e 7300 7274 006d 6966 746c     id.hnd.strm.filt
   d7088:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d7098:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d70a8:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d70b8:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d70c8:	7061 0070 3025 3031 2075 5d00 0020 6425     app.%010u .] .%d
   d70d8:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   d70e8:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   d70f8:	0020 0a0d 6600 6c00 006e 6e66 6300 646f      ....f.ln.fn.cod
   d7108:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
   d7118:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
   d7128:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

000d7138 <_ZTV11USARTSerial>:
	...
   d7140:	54a1 000d 54f1 000d 54ff 000d 53b5 000d     .T...T...T...S..
   d7150:	54b5 000d 54d7 000d 54c3 000d 54eb 000d     .T...T...T...T..
   d7160:	54a3 000d 54a7 000d                         .T...T..

000d7168 <_ZTV8SPIClass>:
	...
   d7170:	5631 000d 5633 000d                         1V..3V..

000d7178 <_ZTVN5spark13EthernetClassE>:
	...
   d7180:	56cd 000d 56c3 000d 56b9 000d 56af 000d     .V...V...V...V..
   d7190:	56a3 000d 5697 000d 568b 000d 5683 000d     .V...V...V...V..
   d71a0:	5679 000d 566f 000d 4773 000d 6f6c 0067     yV..oV..sG..log.
   d71b0:	0000 0000                                   ....

000d71b4 <__sf_fake_stdin>:
	...

000d71d4 <__sf_fake_stdout>:
	...

000d71f4 <__sf_fake_stderr>:
	...
   d7214:	0043                                        C.

000d7216 <link_const_variable_data_end>:
	...

000d7218 <link_constructors_location>:
   d7218:	000d4301 	.word	0x000d4301
   d721c:	000d4841 	.word	0x000d4841
   d7220:	000d48bd 	.word	0x000d48bd
   d7224:	000d49e5 	.word	0x000d49e5
   d7228:	000d536d 	.word	0x000d536d
   d722c:	000d5391 	.word	0x000d5391
   d7230:	000d53a5 	.word	0x000d53a5
   d7234:	000d5491 	.word	0x000d5491
   d7238:	000d5619 	.word	0x000d5619
   d723c:	000d56d9 	.word	0x000d56d9
   d7240:	000d58cd 	.word	0x000d58cd
   d7244:	000d599d 	.word	0x000d599d
   d7248:	000d5a21 	.word	0x000d5a21
   d724c:	000d5ae5 	.word	0x000d5ae5
   d7250:	000d5ba9 	.word	0x000d5ba9

000d7254 <link_constructors_end>:
	...
